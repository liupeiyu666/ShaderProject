//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Avatar/Avatar_Emission_With_Mask_Transparent" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGBA)", 2D) = "white" { }
_MainTex_Alpha ("Main Tex Alpha", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_Emission ("Emission", Range(1, 100)) = 1
_EmissionColor ("Emmisive Color", Color) = (1,1,1,1)
_EmissionBloomFactor ("Emission Bloom Factor", Float) = 1
_EmissionWithMask ("Emission With Mask", Range(1, 100)) = 1
_EmissionColorWithMask ("Emmisive Color With Mask", Color) = (1,1,1,1)
_EmissionBloomFactorWithMask ("Emission Bloom Factor With Mask", Float) = 1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
_OutlineCamStrt ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
[Toggle(USINGBLOOMMASK)] _UsingBloomMask ("UsingBloomMask", Float) = 0
_BloomMaskTex ("Bloom Mask Tex", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 38269
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_23;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat5.xyz = u_xlat7.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat3.xyz * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_23) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_2.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0.x = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        SV_Target0.xyz = u_xlat16_0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat0.xzw = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        SV_Target0.xyz = u_xlat0.xzw;
    } else {
        SV_Target0.xyz = u_xlat16_7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_26;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat8.xxx * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat6.xyz = u_xlat8.xxx * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat3.xyz * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_26 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_26 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_2.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
mediump float u_xlat16_8;
ivec3 u_xlati8;
bvec2 u_xlatb16;
float u_xlat24;
bool u_xlatb24;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat3.xyz = u_xlat8.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat16_7.xyz = u_xlat1.xzw * u_xlat8.xxx + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb24)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8.x = u_xlat16_8 + 1.0;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.x = int(u_xlat8.x);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (u_xlati8.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat16_4.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_28 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat16_28 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = u_xlat8.xxx * u_xlat0.xzw + u_xlat16_4.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
bvec2 u_xlatb9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat4.xyz = u_xlat11.xxx * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_7.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask, _UsingBloomMask)).xy;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_7.xyz);
        u_xlat7.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_7.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    //ENDIF
    }
    if(u_xlatb0.y){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.00100005;
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = min(u_xlat0.x, 1.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGShininess;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _RGScale + _RGBias;
    u_xlat16_40 = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
    u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat16_40 * _RGRatio;
    u_xlat0.xzw = u_xlat0.xxx * _RGColor.xyz + (-u_xlat16_7.xyz);
    u_xlat0.xyz = u_xlat11.xxx * u_xlat0.xzw + u_xlat16_7.xyz;
    SV_Target0.w = _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
mediump vec3 u_xlat16_10;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
float u_xlat25;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati3 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati8.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati8.z != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat5.xyz = u_xlat3.xyz * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat6.xyz = vec3(u_xlat24) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_7.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb27)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_26) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat25 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat25 = u_xlat25 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat25));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat25);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
ivec3 u_xlati8;
float u_xlat9;
float u_xlat16;
mediump float u_xlat16_16;
int u_xlati16;
float u_xlat24;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat24 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat24 = floor(u_xlat24);
    u_xlat8.z = max(u_xlat24, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat8.x = max(u_xlat8.x, 0.0);
    u_xlati8.xz = ivec2(u_xlat8.xz);
    u_xlat1.xz = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8.x = int(u_xlat16_28);
    u_xlat16_6.xyz = (u_xlati8.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati8.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat8.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-_WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat16_7.xyz = u_xlat2.xyz * vec3(u_xlat24) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb26)) ? u_xlat16_7.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_7.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_16 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_16 = (-u_xlat16_28) + u_xlat16_16;
    u_xlat16 = u_xlat16_16 + 1.0;
    u_xlat16 = floor(u_xlat16);
    u_xlat16 = max(u_xlat16, 0.0);
    u_xlati16 = int(u_xlat16);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati16) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_2.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_3.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb3.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb3.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat9 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat9 = u_xlat9 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat8.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat8.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat24 = u_xlat24 + u_xlat24;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat24) * vec2(1.70000005, 1.5) + (-vec2(u_xlat9));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat24 = u_xlat24 * 1.70000005 + (-u_xlat9);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat24) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_3.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat3.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_3;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
mediump vec3 u_xlat16_12;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
bool u_xlatb33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati3 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati10.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati10.z != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat5.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat6.xyz = u_xlat3.xyz * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat6.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_8.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb33)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_8.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _EmissionColor.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_Emission) + (-u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat10_1.www * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_2.xyz);
        u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + u_xlat16_2.xyz;
        u_xlat16_2.xyz = u_xlat16_2.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat31 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat31 = u_xlat31 * 1.99000001 + -1.0;
    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat31));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat31);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_2.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_2;
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_4.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_2.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_2.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
bvec2 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
ivec3 u_xlati10;
float u_xlat11;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
float u_xlat30;
bool u_xlatb32;
mediump float u_xlat16_34;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_34 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat30 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat30 = floor(u_xlat30);
    u_xlat10.z = max(u_xlat30, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat10.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10.x = floor(u_xlat10.x);
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlati10.xz = ivec2(u_xlat10.xz);
    u_xlat1.xz = vec2(u_xlat16_34) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_34 = (u_xlati10.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_34 = u_xlat16_34 + vs_COLOR1;
    u_xlat16_34 = u_xlat16_34 * 0.5 + (-_LightArea);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = floor(u_xlat16_34);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlati10.x = int(u_xlat16_34);
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_5.xyz = (u_xlati10.z != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat16_34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_6.xyz = vec3(u_xlat16_34) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat2.xyz = u_xlat10.xxx * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * u_xlat10.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb32 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat30) + (-_WorldSpaceLightPos0.xyz);
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat16_8.xyz = u_xlat3.xyz * vec3(u_xlat30) + _CustomLightDir.xyz;
    u_xlat16_34 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_8.xyz = vec3(u_xlat16_34) * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (bool(u_xlatb32)) ? u_xlat16_8.xyz : u_xlat7.xyz;
    u_xlat16_34 = dot(u_xlat16_6.xyz, u_xlat16_8.xyz);
    u_xlat16_34 = max(u_xlat16_34, 0.0);
    u_xlat16_34 = log2(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * _Shininess;
    u_xlat16_34 = exp2(u_xlat16_34);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_34) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _EnvColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EmissionColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_Emission) + (-u_xlat16_5.xyz);
    u_xlat16_3.xyz = u_xlat10_1.yyy * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat16_0 = u_xlat10_1.y * u_xlat10_0.x;
        u_xlat16_7.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_3.xyz);
        u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + u_xlat16_3.xyz;
        u_xlat16_3.xyz = u_xlat16_3.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb7.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb7.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb7.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat11 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat11 = u_xlat11 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat10.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat10.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat10.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat16_6.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat16_6.xyz * (-vec3(u_xlat30)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_8.xyz;
    u_xlat30 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat30) * vec2(1.70000005, 1.5) + (-vec2(u_xlat11));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat30 = u_xlat30 * 1.70000005 + (-u_xlat11);
    u_xlat30 = u_xlat30 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat7.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat7.xyz = vec3(u_xlat30) * u_xlat7.xyz + u_xlat0.xyz;
    u_xlat16_8.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat7.xyz;
    u_xlat30 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_8.xyz : u_xlat0.xyz;
    u_xlat16_3.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat30) * u_xlat16_1 + u_xlat16_3;
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_6.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_5.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat16_5.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat11) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
uniform 	float _UsingBloomMask;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD1;
out mediump float vs_COLOR1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat4;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat9;
bvec2 u_xlatb9;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat1.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    u_xlatb9.xy = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingDitherAlpha, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xy;
    vs_TEXCOORD5.xy = (u_xlatb9.y) ? u_xlat1.xy : vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat1.xyw = vec3(u_xlat8) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb8 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_3.xyz = (bool(u_xlatb8)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_3.x = dot(u_xlat1.xyw, u_xlat16_3.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyw;
    u_xlat8 = u_xlat16_3.x * 0.497500002 + 0.5;
    vs_COLOR1 = u_xlat8;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat2.zz + u_xlat2.xw;
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(u_xlatb9.xxx));
    vs_TEXCOORD3.z = u_xlatb9.x ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat4 = u_xlat0.w + u_xlat0.y;
    u_xlat12 = u_xlat0.x * in_POSITION0.x;
    u_xlat9.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat9.y = u_xlat12 * 0.25 + u_xlat4;
    vs_TEXCOORD4.zw = u_xlat9.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	mediump float _Emission;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump float _EmissionWithMask;
uniform 	mediump vec4 _EmissionColorWithMask;
uniform 	float _UsingDitherAlpha;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD1;
in mediump float vs_COLOR1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec3 u_xlatu0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
bvec2 u_xlatb1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
float u_xlat12;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat5.xyz = vec3(u_xlat33) * u_xlat4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat5.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz;
    u_xlat16_9.xyz = u_xlat1.xyz * _EmissionColor.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_Emission) + (-u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat1.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlatb0.xz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vec4(_UsingBloomMask, _UsingBloomMask, _UsingDitherAlpha, _UsingBloomMask)).xz;
    if(u_xlatb0.x){
        u_xlat10_0.x = texture(_BloomMaskTex, vs_TEXCOORD5.xy).x;
        u_xlat0.x = u_xlat1.w * u_xlat10_0.x;
        u_xlat16_1.xyz = _EmissionColorWithMask.xyz * vec3(vec3(_EmissionWithMask, _EmissionWithMask, _EmissionWithMask)) + (-u_xlat16_4.xyz);
        u_xlat4.xyz = u_xlat0.xxx * u_xlat16_1.xyz + u_xlat16_4.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    //ENDIF
    }
    if(u_xlatb0.z){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xz = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xz = u_xlat0.xz * _ScreenParams.yx;
            u_xlat0.xz = u_xlat0.xz * vec2(0.25, 0.25);
            u_xlatb1.xy = greaterThanEqual(u_xlat0.xzxx, (-u_xlat0.xzxx)).xy;
            u_xlat0.xz = fract(abs(u_xlat0.xz));
            u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.z = (u_xlatb1.y) ? u_xlat0.z : (-u_xlat0.z);
            u_xlat0.xz = u_xlat0.xz * vec2(4.0, 4.0);
            u_xlatu0.xz = uvec2(u_xlat0.xz);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.z)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_1.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_1.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.w = _Opaqueness;
    u_xlat16_1 = (-u_xlat16_4) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_4;
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat16_8.xyz);
    u_xlat1.x = (-u_xlat1.x) + 1.00100005;
    u_xlat1.x = max(u_xlat1.x, 0.00100000005);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = log2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGShininess;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * _RGScale + _RGBias;
    u_xlat16_7.x = u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat16_7.x * _RGRatio;
    u_xlat1.xzw = u_xlat1.xxx * _RGColor.xyz + (-u_xlat0.xyz);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 126548
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = vs_COLOR0.w + 0.99000001;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    if((u_xlati0)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 131599
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb2){
        u_xlat10_2 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_2 = u_xlat10_2 * u_xlat10_0;
        u_xlat16_2 = u_xlat16_2;
    } else {
        u_xlat16_2 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    SV_Target0.w = u_xlat16_2 * u_xlat16_1 + _BloomFactor;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb2){
        u_xlat10_2 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_2 = u_xlat10_2 * u_xlat10_0;
        u_xlat16_2 = u_xlat16_2;
    } else {
        u_xlat16_2 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    SV_Target0.w = u_xlat16_2 * u_xlat16_1 + _BloomFactor;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
mediump float u_xlat16_2;
lowp float u_xlat10_2;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb2){
        u_xlat10_2 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_2 = u_xlat10_2 * u_xlat10_0;
        u_xlat16_2 = u_xlat16_2;
    } else {
        u_xlat16_2 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    SV_Target0.w = u_xlat16_2 * u_xlat16_1 + _BloomFactor;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
float u_xlat2;
lowp float u_xlat10_2;
vec2 u_xlat3;
ivec2 u_xlati3;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
bool u_xlatb4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
int u_xlati10;
bool u_xlatb10;
bool u_xlatb14;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb4){
        u_xlat10_4 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_4 = u_xlat10_4 * u_xlat10_0;
        u_xlat16_4 = u_xlat16_4;
    } else {
        u_xlat16_4 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_1 = u_xlat16_4 * u_xlat16_1 + _BloomFactor;
    u_xlat10_2 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat2 = u_xlat10_2 * _SPNoiseScaler;
    u_xlat2 = u_xlat2 * 1.99000001 + -1.0;
    u_xlat6 = _SPNoiseScaler * _SPTransition;
    u_xlat10 = u_xlat6 * 1.5 + (-u_xlat2);
    u_xlat10 = u_xlat10 + 1.0;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlat3.xy = (-vec2(u_xlat6)) * vec2(1.70000005, 1.5) + vec2(u_xlat2);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlati3.x==0);
#else
    u_xlatb14 = u_xlati3.x==0;
#endif
    u_xlatb10 = u_xlatb14 && u_xlatb10;
    u_xlat2 = u_xlat6 * 1.70000005 + (-u_xlat2);
    u_xlat2 = u_xlat2 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat16_1) + _SPTransitionBloomFactor;
    u_xlat2 = u_xlat2 * u_xlat6 + u_xlat16_1;
    u_xlat16_5 = u_xlat16_1 * _SPOpaqueness;
    u_xlat16_1 = (u_xlati3.y != 0) ? u_xlat16_1 : u_xlat16_5;
    SV_Target0.w = (u_xlatb10) ? u_xlat2 : u_xlat16_1;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
float u_xlat2;
lowp float u_xlat10_2;
vec2 u_xlat3;
ivec2 u_xlati3;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
bool u_xlatb4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
int u_xlati10;
bool u_xlatb10;
bool u_xlatb14;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb4){
        u_xlat10_4 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_4 = u_xlat10_4 * u_xlat10_0;
        u_xlat16_4 = u_xlat16_4;
    } else {
        u_xlat16_4 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_1 = u_xlat16_4 * u_xlat16_1 + _BloomFactor;
    u_xlat10_2 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat2 = u_xlat10_2 * _SPNoiseScaler;
    u_xlat2 = u_xlat2 * 1.99000001 + -1.0;
    u_xlat6 = _SPNoiseScaler * _SPTransition;
    u_xlat10 = u_xlat6 * 1.5 + (-u_xlat2);
    u_xlat10 = u_xlat10 + 1.0;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlat3.xy = (-vec2(u_xlat6)) * vec2(1.70000005, 1.5) + vec2(u_xlat2);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlati3.x==0);
#else
    u_xlatb14 = u_xlati3.x==0;
#endif
    u_xlatb10 = u_xlatb14 && u_xlatb10;
    u_xlat2 = u_xlat6 * 1.70000005 + (-u_xlat2);
    u_xlat2 = u_xlat2 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat16_1) + _SPTransitionBloomFactor;
    u_xlat2 = u_xlat2 * u_xlat6 + u_xlat16_1;
    u_xlat16_5 = u_xlat16_1 * _SPOpaqueness;
    u_xlat16_1 = (u_xlati3.y != 0) ? u_xlat16_1 : u_xlat16_5;
    SV_Target0.w = (u_xlatb10) ? u_xlat2 : u_xlat16_1;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BloomMaskTex_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
out mediump vec2 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xy = in_TEXCOORD0.xy * _BloomMaskTex_ST.xy + _BloomMaskTex_ST.zw;
    vs_TEXCOORD2.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform 	mediump float _EmissionBloomFactor;
uniform 	float _UsingBloomMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BloomMaskTex;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
in mediump vec2 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
mediump float u_xlat16_1;
float u_xlat2;
lowp float u_xlat10_2;
vec2 u_xlat3;
ivec2 u_xlati3;
mediump float u_xlat16_4;
lowp float u_xlat10_4;
bool u_xlatb4;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
int u_xlati10;
bool u_xlatb10;
bool u_xlatb14;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask));
#else
    u_xlatb4 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingBloomMask);
#endif
    if(u_xlatb4){
        u_xlat10_4 = texture(_BloomMaskTex, vs_TEXCOORD2.xy).x;
        u_xlat16_4 = u_xlat10_4 * u_xlat10_0;
        u_xlat16_4 = u_xlat16_4;
    } else {
        u_xlat16_4 = u_xlat10_0;
    //ENDIF
    }
    u_xlat16_1 = (-_BloomFactor) + _EmissionBloomFactor;
    u_xlat16_1 = u_xlat16_4 * u_xlat16_1 + _BloomFactor;
    u_xlat10_2 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat2 = u_xlat10_2 * _SPNoiseScaler;
    u_xlat2 = u_xlat2 * 1.99000001 + -1.0;
    u_xlat6 = _SPNoiseScaler * _SPTransition;
    u_xlat10 = u_xlat6 * 1.5 + (-u_xlat2);
    u_xlat10 = u_xlat10 + 1.0;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlati10==0);
#else
    u_xlatb10 = u_xlati10==0;
#endif
    u_xlat3.xy = (-vec2(u_xlat6)) * vec2(1.70000005, 1.5) + vec2(u_xlat2);
    u_xlat3.xy = u_xlat3.xy + vec2(1.0, 1.0);
    u_xlat3.xy = floor(u_xlat3.xy);
    u_xlat3.xy = max(u_xlat3.xy, vec2(0.0, 0.0));
    u_xlati3.xy = ivec2(u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlati3.x==0);
#else
    u_xlatb14 = u_xlati3.x==0;
#endif
    u_xlatb10 = u_xlatb14 && u_xlatb10;
    u_xlat2 = u_xlat6 * 1.70000005 + (-u_xlat2);
    u_xlat2 = u_xlat2 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat16_1) + _SPTransitionBloomFactor;
    u_xlat2 = u_xlat2 * u_xlat6 + u_xlat16_1;
    u_xlat16_5 = u_xlat16_1 * _SPOpaqueness;
    u_xlat16_1 = (u_xlati3.y != 0) ? u_xlat16_1 : u_xlat16_5;
    SV_Target0.w = (u_xlatb10) ? u_xlat2 : u_xlat16_1;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}