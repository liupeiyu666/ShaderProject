//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_DLC/Avatar_Transparent_SlideFX_DLC" {
Properties {
[MHYHelpBox(Info, Vertex Color B (outline width))] [MHYHeaderBox(OPTIONS)] [Enum(UnityEngine.Rendering.CullMode)] _CullMode ("Cull Mode", Float) = 2
[Toggle(_ALPHATEST_ON)] _EnableAlphaCutoff ("Enable Alpha Cutoff", Float) = 0
[MHYKeywordFilter(_ALPHATEST_ON On)] _AlphaCutoff ("Alpha Cutoff", Range(0, 1)) = 0.5
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnits ("Polygon Offset Units", Float) = 0
_OutlinePolygonOffsetFactor ("Outline Polygon Offset Factor", Float) = 0
_OutlinePolygonOffsetUnits ("Outline Polygon Offset Units", Float) = 0
[MHYHeaderBox(MAPS)] [MHYHeader(Main Maps)] [MHYSingleLineTextureNoScaleOffset(_Color)] _MainTex ("Albedo |RGB(base color) A (alpha)", 2D) = "white" { }
_Color ("Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
[MHYSingleLineTextureNoScaleOffset] _LightMap ("Light Map |R (sepcular intensity) G (diffuse threshold) B (specular threshold) A (material id)", 2D) = "grey" { }
[MHYSingleLineTextureNoScaleOffset] _MaskMap ("Mask Map |R (curvature) G (metal mask)", 2D) = "grey" { }
[MHYTextureScaleOffset] _MainMaps_ST ("Main Maps ST", Vector) = (1,1,0,0)
[MHYHeaderBox(LIGHTING)] [Toggle(_MULTI_BLOOM_ON)] _EnableMultipleBloom ("Enable Multiple Bloom", Float) = 0
[MHYKeywordFilter(_MULTI_BLOOM_ON Off)] _BloomIntensity ("Bloom Intensity", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity0 ("Bloom Intensity 0 (ID = 0)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity1 ("Bloom Intensity 1 (ID = 31)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity2 ("Bloom Intensity 2 (ID = 63)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity3 ("Bloom Intensity 3 (ID = 95)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity4 ("Bloom Intensity 4 (ID = 127)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity5 ("Bloom Intensity 5 (ID = 159)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity6 ("Bloom Intensity 6 (ID = 192)", Float) = 1
[MHYKeywordFilter(_MULTI_BLOOM_ON On)] _BloomIntensity7 ("Bloom Intensity 7 (ID = 223)", Float) = 1
[MHYHeaderBox(DIFFUSE)] [Toggle(_MULTI_DIFFUSE_ON)] _EnableMultipleDiffuse ("Enable Multiple Diffuse", Float) = 0
[MHYColorGradient(_MULTI_DIFFUSE_ON On)] _DiffuseRampMuitiTex ("Diffuse Multiple Ramp", 2D) = "white" { }
[MHYColorGradient(_MULTI_DIFFUSE_ON Off)] _DiffuseRampTex ("Diffuse Ramp", 2D) = "white" { }
_DiffuseRanges ("Diffuse Ranges", Vector) = (0.4,0.6,0,0)
_ShadowThreshold ("Shadow Threshold", Range(0, 1)) = 0.5
[MHYHeaderBox(SPECULAR)] [Toggle(_MULTI_SPECULAR_ON)] _EnableMultipleSpecular ("Enable Multiple Specular", Float) = 0
[MHYKeywordFilter(_MULTI_SPECULAR_ON Off)] _SpecularColor ("Specular Color", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor0 ("Specular Color (ID = 0)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor1 ("Specular Color (ID = 31)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor2 ("Specular Color (ID = 63)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor3 ("Specular Color (ID = 95)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor4 ("Specular Color (ID = 127)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor5 ("Specular Color (ID = 159)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor6 ("Specular Color (ID = 192)", Color) = (1,1,1,1)
[MHYKeywordFilter(_MULTI_SPECULAR_ON On)] _SpecularColor7 ("Specular Color (ID = 223)", Color) = (1,1,1,1)
_SpecularShininess ("Specular Shininess", Range(0.1, 500)) = 10
_SpecularIntensity ("Specular Intensity", Range(0, 50)) = 1
[MHYHeaderBox(OUTLINE)] [Toggle(_MULTI_OUTLINE_ON)] _EnableMultipleOutline ("Enable Multiple Outline", Float) = 0
[MHYKeywordFilter(_MULTI_OUTLINE_ON Off)] _OutlineColor ("Outline Color", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor0 ("Outline Color 0 (ID = 0)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor1 ("Outline Color 1 (ID = 31)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor2 ("Outline Color 2 (ID = 63)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor3 ("Outline Color 3 (ID = 95)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor4 ("Outline Color 4 (ID = 127)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor5 ("Outline Color 5 (ID = 159)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor6 ("Outline Color 6 (ID = 192)", Color) = (0,0,0,1)
[MHYKeywordFilter(_MULTI_OUTLINE_ON On)] _OutlineColor7 ("Outline Color 7 (ID = 223)", Color) = (0,0,0,1)
_OutlineWidth ("Outline Width", Range(0, 1)) = 0.1
[KeywordEnum(Normal, Tangent, UV2)] _OutlineNormalFrom ("Outline Normal From", Float) = 0
[MHYHeaderBox(SPECIAL_STATE)] [Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
[MHYHeaderBox(SlideFx)] _SlideFxSlide ("SlideFxSlide", Range(-0.5, 1)) = 0
_SlideFxEdge ("SlideFxEdge", Range(0, 0.2)) = 0.22
_SlideFxSmoothStep ("SlideFxSmoothStep", Range(0, 0.2)) = 0.12
_SlideFxEdgeColor ("SlideFxEdgeColor", Color) = (0.9448276,1,0,0)
_SlideFxEdgeIntensity ("SlideFxEdgeIntensity", Float) = 1
_SlideFxNoiseTex ("SlideFxNoiseTex", 2D) = "white" { }
[MHYHeaderBox(UvMove)] _UvMoveTex ("UvMoveTex", 2D) = "white" { }
_UvMoveSpeed ("UvMoveSpeed", Vector) = (0,0,0,0)
_UvMoveScaler ("UvMoveScaler", Range(0, 10)) = 0
_UvMoveColor ("UvMoveColor", Color) = (1,1,1,1)
[Toggle(_UVMOVECOLOURFUL_ON)] _UvMoveColorful ("UvMoveColorful", Float) = 0
_UvMoveNoiseTex ("UvMoveNoiseTex", 2D) = "white" { }
_UvMoveNoiseSpeed ("UvMoveNoiseSpeed", Vector) = (0,0,0,0)
_UvMoveNoiseIntensity ("UvMoveNoiseIntensity", Range(0, 3)) = 1
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
[MHYHeaderBox(DITHER)] [Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 600
 Tags { "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "PerformanceChecks" = "False" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 600
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "PASSFLAGS" = "OnlyDirectional" "PerformanceChecks" = "False" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 53117
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Character/Shared/TRANSPARENTALPHA"
 UsePass "Hidden/miHoYo/DLC/Character/Shared/TRANSPARENTSLIDEFXOUTLINE"
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
SubShader {
 LOD 200
 Tags { "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "PerformanceChecks" = "False" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARDONLY"
  LOD 200
  Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "PASSFLAGS" = "OnlyDirectional" "PerformanceChecks" = "False" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Cull Off
  GpuProgramID 99684
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat1.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat10_24) * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_17 = texture(_UvMoveTex, u_xlat17.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_17);
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_24 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_24) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_27 = texture(_UvMoveTex, u_xlat2.xy).x;
    u_xlat16_2.xyz = vec3(u_xlat10_27) * u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_18 = texture(_UvMoveTex, u_xlat18.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_18);
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_20 = texture(_UvMoveTex, u_xlat20.xy).x;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10_20);
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_UvMoveScaler) + u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
vec2 u_xlat9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
float u_xlat16;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp vec2 u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat1.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat9.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat1.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat9.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat1.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat1.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat1.xy;
    u_xlat17.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat17.xy;
    u_xlat10_17.xy = texture(_UvMoveNoiseTex, u_xlat17.xy).xy;
    u_xlat1.xy = u_xlat10_17.xy * vec2(_UvMoveNoiseIntensity) + u_xlat1.xy;
    u_xlat10_1.xyz = texture(_UvMoveTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _UvMoveColor.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_UvMoveScaler) + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_1.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
mediump vec2 u_xlat16_14;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_6.x = (-u_xlat10_2.x) + 1.0;
    u_xlat16_14.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_6.xy = u_xlat16_6.xx * u_xlat16_14.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_22 = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_22 = u_xlat16_29 / u_xlat16_22;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_6.xxyy).xz;
    u_xlat16_7.xy = vec2(u_xlat16_29) + (-u_xlat16_6.xy);
    u_xlat16_29 = (-u_xlat16_6.x) + u_xlat16_6.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_7.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_6.x = (-u_xlat16_6.y) + 1.0;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.y / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb9.x) ? u_xlat16_22 : u_xlat16_29;
    u_xlat16_6.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_6.x;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec2 u_xlat9;
ivec2 u_xlati9;
bvec3 u_xlatb9;
mediump float u_xlat16_13;
bvec2 u_xlatb16;
vec2 u_xlat17;
lowp float u_xlat10_17;
mediump float u_xlat16_21;
mediump vec2 u_xlat16_23;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_29;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_1.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * u_xlat3.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_29 = inversesqrt(u_xlat16_29);
    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_29 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.5;
    u_xlat16_29 = dot(vec2(u_xlat16_29), u_xlat10_1.yy);
    u_xlat16_30 = (-u_xlat10_2.x) + 1.0;
    u_xlat16_7.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = vec2(u_xlat16_30) * u_xlat16_7.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_29 / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb9.xz = lessThan(vec4(u_xlat16_29), u_xlat16_7.xxyy).xz;
    u_xlat16_23.xy = vec2(u_xlat16_29) + (-u_xlat16_7.xy);
    u_xlat16_29 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_29 = max(u_xlat16_29, 9.99999975e-05);
    u_xlat16_29 = u_xlat16_23.x / u_xlat16_29;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_29 = u_xlat16_29 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_23.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_29 = (u_xlatb9.z) ? u_xlat16_29 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb9.x) ? u_xlat16_30 : u_xlat16_29;
    u_xlat16_7.y = 0.5;
    u_xlat10_2.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_5.xyz);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlat16_5.x = log2(u_xlat16_5.x);
    u_xlat16_5.x = u_xlat16_5.x * _SpecularShininess;
    u_xlat16_5.x = exp2(u_xlat16_5.x);
    u_xlat16_13 = dFdx(u_xlat16_5.x);
    u_xlat16_21 = dFdy(u_xlat16_5.x);
    u_xlat16_13 = abs(u_xlat16_21) + abs(u_xlat16_13);
    u_xlat16_21 = (-u_xlat10_1.z) + 1.0;
    u_xlat16_29 = (-u_xlat16_13) + u_xlat16_21;
    u_xlat16_5.y = u_xlat16_13 + u_xlat16_21;
    u_xlat16_5.xy = (-vec2(u_xlat16_29)) + u_xlat16_5.xy;
    u_xlat16_13 = float(1.0) / u_xlat16_5.y;
    u_xlat16_5.x = u_xlat16_13 * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_13 = u_xlat16_5.x * -2.0 + 3.0;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
    u_xlat16_5.xyz = u_xlat16_5.xxx * _SpecularColor.xyz;
    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz;
    u_xlat16_29 = _RimColor.w + -0.5;
    u_xlat16_30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat16_30 = max(u_xlat16_30, 0.0);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat16_7.x = (-u_xlat16_29) + 1.0;
    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_30;
    u_xlat16_30 = float(1.0) / u_xlat16_7.x;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
#else
    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_29 * -2.0 + 3.0;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_7.xyz = vec3(u_xlat16_30) * _WorldSpaceLightPos0.xyz;
    u_xlat16_30 = dot(u_xlat3.xyz, u_xlat16_7.xyz);
    u_xlat16_30 = (-u_xlat16_30) + 1.0;
    u_xlat24 = u_xlat16_29 * u_xlat16_30;
    u_xlat16_29 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_29<u_xlat24);
#else
    u_xlatb24 = u_xlat16_29<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat1.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat1.xyz = u_xlat10_2.yyy * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat10_2.xzw * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat1.xyz * vec3(_RimPower) + u_xlat16_5.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_1.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_1.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat1.x = _SPNoiseScaler * _SPTransition;
    u_xlat9.xy = u_xlat1.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = floor(u_xlat9.xy);
    u_xlat9.xy = max(u_xlat9.xy, vec2(0.0, 0.0));
    u_xlati9.xy = ivec2(u_xlat9.xy);
    u_xlat24 = u_xlat1.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati9.y != 0) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat24 = (u_xlati9.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati9.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_5.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat1.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat17.x = u_xlat24 * u_xlat9.x;
    u_xlat25 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat1.x = u_xlat1.x * u_xlat25;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat25 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat1.x = u_xlat25 * u_xlat1.x + (-u_xlat17.x);
    u_xlat10_17 = texture(_SlideFxNoiseTex, u_xlat2.xy).x;
    u_xlat1.x = u_xlat10_17 * u_xlat1.x;
    u_xlat17.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat17.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat17.xy;
    u_xlat2.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat2.xy;
    u_xlat10_2.xy = texture(_UvMoveNoiseTex, u_xlat2.xy).xy;
    u_xlat17.xy = u_xlat10_2.xy * vec2(_UvMoveNoiseIntensity) + u_xlat17.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat17.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat9.x * u_xlat24 + u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
float u_xlat8;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
float u_xlat16;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp vec2 u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat8 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat8 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat24 = u_xlat0.x * u_xlat16;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat8 = u_xlat8 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat8 * -2.0 + 3.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat10.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat8 = u_xlat2.x * u_xlat8 + (-u_xlat24);
    u_xlat10_24 = texture(_SlideFxNoiseTex, u_xlat10.xy).x;
    u_xlat8 = u_xlat10_24 * u_xlat8;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat18.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat18.xy;
    u_xlat10_18.xy = texture(_UvMoveNoiseTex, u_xlat18.xy).xy;
    u_xlat2.xy = u_xlat10_18.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat16 * u_xlat0.x + u_xlat8;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat8) * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
float u_xlat9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
float u_xlat18;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat0.x = (-u_xlat0.x) + vs_TEXCOORD9.y;
    u_xlat9 = float(1.0) / _SlideFxSmoothStep;
    u_xlat0.x = u_xlat9 * u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat27 = u_xlat0.x * u_xlat18;
    u_xlat2.x = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat9 = u_xlat9 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat9 * -2.0 + 3.0;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat11.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat9 = u_xlat2.x * u_xlat9 + (-u_xlat27);
    u_xlat10_27 = texture(_SlideFxNoiseTex, u_xlat11.xy).x;
    u_xlat9 = u_xlat10_27 * u_xlat9;
    u_xlat2.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat2.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat2.xy;
    u_xlat20.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat20.xy;
    u_xlat10_20.xy = texture(_UvMoveNoiseTex, u_xlat20.xy).xy;
    u_xlat2.xy = u_xlat10_20.xy * vec2(_UvMoveNoiseIntensity) + u_xlat2.xy;
    u_xlat10_2.xyz = texture(_UvMoveTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _UvMoveColor.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(_UvMoveScaler) + u_xlat16_1.xyz;
    SV_Target0.w = u_xlat18 * u_xlat0.x + u_xlat9;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat0.xyz = vec3(u_xlat9) * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27) + u_xlat16_2.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
vec2 u_xlat5;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat5.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat5.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD6.zw = u_xlat5.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat10;
ivec2 u_xlati10;
bvec3 u_xlatb10;
mediump vec2 u_xlat16_14;
lowp float u_xlat10_16;
bvec2 u_xlatb16;
mediump float u_xlat16_17;
vec2 u_xlat18;
lowp float u_xlat10_18;
mediump vec2 u_xlat16_22;
float u_xlat24;
lowp float u_xlat10_24;
bool u_xlatb24;
mediump float u_xlat16_25;
float u_xlat26;
mediump float u_xlat16_30;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb16.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb16.x){
        u_xlat10_16 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_16;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb16.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb16.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb16.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb16.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb16.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb16.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat5.xyz = vec3(u_xlat24) * u_xlat4.xyz;
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_6.xxx;
    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.5;
    u_xlat16_6.x = dot(u_xlat16_6.xx, u_xlat10_2.yy);
    u_xlat16_14.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_22.x = u_xlat16_1.x + -0.5;
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22.x = min(max(u_xlat16_22.x, 0.0), 1.0);
#else
    u_xlat16_22.x = clamp(u_xlat16_22.x, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_22.x * -2.0 + 3.0;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_22.x;
    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_30;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_22.x * u_xlat16_6.x + u_xlat16_14.x;
    u_xlat16_14.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_22.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_14.xy = u_xlat16_14.xx * u_xlat16_22.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_30 = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_30 = u_xlat16_6.x / u_xlat16_30;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
#else
    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
#endif
    u_xlat16_30 = u_xlat16_30 * 0.25;
    u_xlatb10.xz = lessThan(u_xlat16_6.xxxx, u_xlat16_14.xxyy).xz;
    u_xlat16_7.xy = (-u_xlat16_14.xy) + u_xlat16_6.xx;
    u_xlat16_6.x = (-u_xlat16_14.x) + u_xlat16_14.y;
    u_xlat16_6.x = max(u_xlat16_6.x, 9.99999975e-05);
    u_xlat16_6.x = u_xlat16_7.x / u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x * 0.5 + 0.25;
    u_xlat16_14.x = (-u_xlat16_14.y) + 1.0;
    u_xlat16_14.x = max(u_xlat16_14.x, 9.99999975e-05);
    u_xlat16_14.x = u_xlat16_7.y / u_xlat16_14.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14.x = min(max(u_xlat16_14.x, 0.0), 1.0);
#else
    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
#endif
    u_xlat16_14.x = u_xlat16_14.x * 0.25 + 0.75;
    u_xlat16_6.x = (u_xlatb10.z) ? u_xlat16_6.x : u_xlat16_14.x;
    u_xlat16_6.x = (u_xlatb10.x) ? u_xlat16_30 : u_xlat16_6.x;
    u_xlat16_6.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_6.xy).xyz;
    u_xlat16_9.x = dot(u_xlat4.xyz, u_xlat16_9.xyz);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlat16_9.x = log2(u_xlat16_9.x);
    u_xlat16_9.x = u_xlat16_9.x * _SpecularShininess;
    u_xlat16_9.x = exp2(u_xlat16_9.x);
    u_xlat24 = u_xlat16_9.x * u_xlat16_1.x;
    u_xlat16_17 = dFdx(u_xlat24);
    u_xlat16_25 = dFdy(u_xlat24);
    u_xlat16_17 = abs(u_xlat16_25) + abs(u_xlat16_17);
    u_xlat16_25 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_6.x = (-u_xlat16_17) + u_xlat16_25;
    u_xlat16_17 = u_xlat16_17 + u_xlat16_25;
    u_xlat16_17 = (-u_xlat16_6.x) + u_xlat16_17;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x + (-u_xlat16_6.x);
    u_xlat16_9.x = float(1.0) / u_xlat16_17;
    u_xlat16_1.x = u_xlat16_9.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_25 = _RimColor.w + -0.5;
    u_xlat16_6.x = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat16_14.x = (-u_xlat16_25) + 1.0;
    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_14.x;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_6.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat16_6.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = (-u_xlat16_6.x) + 1.0;
    u_xlat24 = u_xlat16_25 * u_xlat16_6.x;
    u_xlat16_25 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(u_xlat16_25<u_xlat24);
#else
    u_xlatb24 = u_xlat16_25<u_xlat24;
#endif
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat24) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_6.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_6.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_6.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_6.xyz = u_xlat16_6.xyz + (-unity_SHC.xyz);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * _CharacterSHColor.www;
    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_24 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat24 = u_xlat10_24 * _SPNoiseScaler;
    u_xlat24 = u_xlat24 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat10.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat24));
    u_xlat10.xy = u_xlat10.xy + vec2(1.0, 1.0);
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = max(u_xlat10.xy, vec2(0.0, 0.0));
    u_xlati10.xy = ivec2(u_xlat10.xy);
    u_xlat24 = u_xlat2.x * 1.70000005 + (-u_xlat24);
    u_xlat24 = u_xlat24 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati10.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat24 = (u_xlati10.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati10.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat24 = _SlideFxEdge + _SlideFxSlide;
    u_xlat24 = (-u_xlat24) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat24 = u_xlat24 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat24 * -2.0 + 3.0;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat18.x = u_xlat24 * u_xlat10.x;
    u_xlat26 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat26;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat26 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat26 * u_xlat2.x + (-u_xlat18.x);
    u_xlat10_18 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_18 * u_xlat2.x;
    u_xlat18.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat18.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat18.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat18.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat18.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat18.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat10.x * u_xlat24 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat24 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_TEXCOORD1;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
out highp vec3 vs_TEXCOORD8;
out highp vec4 vs_TEXCOORD9;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
float u_xlat5;
vec2 u_xlat11;
float u_xlat15;
bool u_xlatb15;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat15 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat15 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb15) ? _DitherAlpha : u_xlat1.z;
    vs_TEXCOORD2.w = u_xlat1.w;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat3 = u_xlat1.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat2;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD5.xyz = u_xlat0.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat5 = u_xlat0.w + u_xlat0.y;
    u_xlat15 = u_xlat0.x * in_POSITION0.x;
    u_xlat11.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat11.y = u_xlat15 * 0.25 + u_xlat5;
    vs_TEXCOORD6.zw = u_xlat11.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD6.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    vs_TEXCOORD7.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD9.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD9.zw = in_TEXCOORD2.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHC;
uniform 	float _ReceiveDynamicShadow;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	float _SPTransitionEmissionScaler;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump vec2 _DiffuseRanges;
uniform 	mediump float _ShadowThreshold;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump float _SpecularShininess;
uniform 	mediump float _SpecularIntensity;
uniform 	mediump float _RimEdge;
uniform 	mediump vec4 _RimColor;
uniform 	mediump float _RimPower;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform 	vec4 _SlideFxEdgeColor;
uniform 	float _SlideFxEdgeIntensity;
uniform 	vec4 _UvMoveTex_ST;
uniform 	vec2 _UvMoveSpeed;
uniform 	mediump vec4 _UvMoveColor;
uniform 	mediump float _UvMoveScaler;
uniform 	vec4 _UvMoveNoiseTex_ST;
uniform 	vec2 _UvMoveNoiseSpeed;
uniform 	mediump float _UvMoveNoiseIntensity;
uniform 	mediump vec4 _CharacterSHColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
uniform lowp sampler2D _MaskMap;
uniform lowp sampler2D _DynamicCharacterShadowVolumeBuffer;
uniform lowp sampler2D _DiffuseRampTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp sampler2D _SlideFxNoiseTex;
uniform lowp sampler2D _UvMoveNoiseTex;
uniform lowp sampler2D _UvMoveTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
ivec2 u_xlati11;
bvec3 u_xlatb11;
mediump vec2 u_xlat16_16;
lowp float u_xlat10_18;
bvec2 u_xlatb18;
mediump float u_xlat16_19;
vec2 u_xlat20;
lowp float u_xlat10_20;
mediump float u_xlat16_25;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(0.5<_ReceiveDynamicShadow);
#else
    u_xlatb18.x = 0.5<_ReceiveDynamicShadow;
#endif
    if(u_xlatb18.x){
        u_xlat10_18 = texture(_DynamicCharacterShadowVolumeBuffer, u_xlat0.yx).x;
        u_xlat16_1.x = u_xlat10_18;
    } else {
        u_xlat16_1.x = 1.0;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb18.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb18.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb18.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb18.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb18.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb18.x){
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb18.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb18.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb18.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * _EnvColor.xyz;
    u_xlat10_2.xyz = texture(_LightMap, vs_TEXCOORD0.xy).xyz;
    u_xlat10_3.xy = texture(_MaskMap, vs_TEXCOORD0.xy).xz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat5.xyz = vec3(u_xlat27) * u_xlat4.xyz;
    u_xlat16_10.xyz = u_xlat4.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
    u_xlat16_6.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_6.xxx;
    u_xlat16_6.xyz = vs_TEXCOORD5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.5;
    u_xlat16_33 = dot(vec2(u_xlat16_33), u_xlat10_2.yy);
    u_xlat16_7.x = u_xlat16_1.x * 0.099999994 + 0.400000006;
    u_xlat16_16.x = u_xlat16_1.x + -0.5;
    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16.x = min(max(u_xlat16_16.x, 0.0), 1.0);
#else
    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_16.x * -2.0 + 3.0;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_16.x;
    u_xlat16_16.x = u_xlat16_16.x * u_xlat16_25;
    u_xlat16_33 = u_xlat16_33 + (-u_xlat16_7.x);
    u_xlat16_33 = u_xlat16_16.x * u_xlat16_33 + u_xlat16_7.x;
    u_xlat16_7.x = (-u_xlat10_3.x) + 1.0;
    u_xlat16_16.xy = vec2((-_DiffuseRanges.xxyx.y) + float(_ShadowThreshold), (-float(_DiffuseRanges.y)) + float(_ShadowThreshold));
    u_xlat16_7.xy = u_xlat16_7.xx * u_xlat16_16.xy + vec2(_DiffuseRanges.x, _DiffuseRanges.y);
    u_xlat16_25 = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_25 = u_xlat16_33 / u_xlat16_25;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_25 * 0.25;
    u_xlatb11.xz = lessThan(vec4(u_xlat16_33), u_xlat16_7.xxyy).xz;
    u_xlat16_8.xy = vec2(u_xlat16_33) + (-u_xlat16_7.xy);
    u_xlat16_33 = (-u_xlat16_7.x) + u_xlat16_7.y;
    u_xlat16_33 = max(u_xlat16_33, 9.99999975e-05);
    u_xlat16_33 = u_xlat16_8.x / u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_33 * 0.5 + 0.25;
    u_xlat16_7.x = (-u_xlat16_7.y) + 1.0;
    u_xlat16_7.x = max(u_xlat16_7.x, 9.99999975e-05);
    u_xlat16_7.x = u_xlat16_8.y / u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x * 0.25 + 0.75;
    u_xlat16_33 = (u_xlatb11.z) ? u_xlat16_33 : u_xlat16_7.x;
    u_xlat16_7.x = (u_xlatb11.x) ? u_xlat16_25 : u_xlat16_33;
    u_xlat16_7.y = 0.5;
    u_xlat10_3.xzw = texture(_DiffuseRampTex, u_xlat16_7.xy).xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat16_10.xyz);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _SpecularShininess;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat27 = u_xlat16_10.x * u_xlat16_1.x;
    u_xlat16_19 = dFdx(u_xlat27);
    u_xlat16_28 = dFdy(u_xlat27);
    u_xlat16_19 = abs(u_xlat16_28) + abs(u_xlat16_19);
    u_xlat16_28 = (-u_xlat10_2.z) + 1.0;
    u_xlat16_33 = (-u_xlat16_19) + u_xlat16_28;
    u_xlat16_19 = u_xlat16_19 + u_xlat16_28;
    u_xlat16_19 = (-u_xlat16_33) + u_xlat16_19;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x + (-u_xlat16_33);
    u_xlat16_10.x = float(1.0) / u_xlat16_19;
    u_xlat16_1.x = u_xlat16_10.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_10.x = u_xlat16_1.x * -2.0 + 3.0;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;
    u_xlat16_1.xyz = u_xlat16_1.xxx * _SpecularColor.xyz;
    u_xlat16_1.xyz = u_xlat10_2.xxx * u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_SpecularIntensity, _SpecularIntensity, _SpecularIntensity));
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat16_28 = _RimColor.w + -0.5;
    u_xlat16_33 = dot(u_xlat5.xyz, u_xlat4.xyz);
    u_xlat16_33 = max(u_xlat16_33, 0.0);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat16_7.x = (-u_xlat16_28) + 1.0;
    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_33;
    u_xlat16_33 = float(1.0) / u_xlat16_7.x;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
    u_xlat16_33 = u_xlat16_28 * -2.0 + 3.0;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
    u_xlat16_28 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_33 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_7.xyz = vec3(u_xlat16_33) * _WorldSpaceLightPos0.xyz;
    u_xlat16_33 = dot(u_xlat4.xyz, u_xlat16_7.xyz);
    u_xlat16_33 = (-u_xlat16_33) + 1.0;
    u_xlat27 = u_xlat16_28 * u_xlat16_33;
    u_xlat16_28 = (-_RimEdge) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_28<u_xlat27);
#else
    u_xlatb27 = u_xlat16_28<u_xlat27;
#endif
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat2.xyz = vec3(u_xlat27) * _RimColor.xyz;
    u_xlat2.xyz = u_xlat10_3.yyy * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_3.xzw * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat16_1.xyz = u_xlat2.xyz * vec3(_RimPower) + u_xlat16_1.xyz;
    u_xlat16_7.x = dot(unity_SHAr.yw, vec2(1.0, 1.0));
    u_xlat16_7.y = dot(unity_SHAg.yw, vec2(1.0, 1.0));
    u_xlat16_7.z = dot(unity_SHAb.yw, vec2(1.0, 1.0));
    u_xlat16_7.xyz = u_xlat16_7.xyz + (-unity_SHC.xyz);
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_7.xyz = u_xlat16_2.xyz * _CharacterSHColor.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _CharacterSHColor.www;
    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = texture(_SPTex, vs_TEXCOORD6.xy).xyz;
    u_xlat10_27 = texture(_SPNoiseTex, vs_TEXCOORD6.zw).x;
    u_xlat27 = u_xlat10_27 * _SPNoiseScaler;
    u_xlat27 = u_xlat27 * 1.99000001 + -1.0;
    u_xlat2.x = _SPNoiseScaler * _SPTransition;
    u_xlat11.xy = u_xlat2.xx * vec2(1.70000005, 1.5) + (-vec2(u_xlat27));
    u_xlat11.xy = u_xlat11.xy + vec2(1.0, 1.0);
    u_xlat11.xy = floor(u_xlat11.xy);
    u_xlat11.xy = max(u_xlat11.xy, vec2(0.0, 0.0));
    u_xlati11.xy = ivec2(u_xlat11.xy);
    u_xlat27 = u_xlat2.x * 1.70000005 + (-u_xlat27);
    u_xlat27 = u_xlat27 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_6.xyz = (u_xlati11.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat27 = (u_xlati11.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_6.xyz = (u_xlati11.x != 0) ? u_xlat16_6.xyz : u_xlat0.xyz;
    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat27 = _SlideFxEdge + _SlideFxSlide;
    u_xlat27 = (-u_xlat27) + vs_TEXCOORD9.y;
    u_xlat2.x = float(1.0) / _SlideFxSmoothStep;
    u_xlat27 = u_xlat27 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat27 * -2.0 + 3.0;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat20.x = u_xlat27 * u_xlat11.x;
    u_xlat29 = vs_TEXCOORD9.y + (-_SlideFxSlide);
    u_xlat2.x = u_xlat2.x * u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat3.xy = vs_TEXCOORD9.zw * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat2.x = u_xlat29 * u_xlat2.x + (-u_xlat20.x);
    u_xlat10_20 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat10_20 * u_xlat2.x;
    u_xlat20.xy = vs_TEXCOORD0.xy * _UvMoveTex_ST.xy + _UvMoveTex_ST.zw;
    u_xlat3.xy = vs_TEXCOORD0.xy * _UvMoveNoiseTex_ST.xy + _UvMoveNoiseTex_ST.zw;
    u_xlat20.xy = _Time.yy * _UvMoveSpeed.xy + u_xlat20.xy;
    u_xlat3.xy = _Time.yy * _UvMoveNoiseSpeed.xy + u_xlat3.xy;
    u_xlat10_3.xy = texture(_UvMoveNoiseTex, u_xlat3.xy).xy;
    u_xlat20.xy = u_xlat10_3.xy * vec2(_UvMoveNoiseIntensity) + u_xlat20.xy;
    u_xlat10_3.xyz = texture(_UvMoveTex, u_xlat20.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_3.xyz * _UvMoveColor.xyz;
    u_xlat0.xyz = u_xlat16_3.xyz * vec3(_UvMoveScaler) + u_xlat0.xyz;
    SV_Target0.w = u_xlat11.x * u_xlat27 + u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx * _SlideFxEdgeColor.xyz;
    u_xlat27 = _SlideFxEdgeIntensity * 50.0;
    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat27) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "_DYNAMIC_CHARACTER_SHADOW_ON" "_MULTI_BLOOM_ON" "_UVMOVECOLOURFUL_ON" }
""
}
}
}
 UsePass "Hidden/miHoYo/DLC/Common/Shared/PREDEPTH"
}
CustomEditor "MoleMoleEditor.CharacterAvatarShaderGUI"
}