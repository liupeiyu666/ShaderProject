//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Simple/Simple_Emission_Transparent_Wound" {
Properties {
_Color ("Main Color", Color) = (0.5,0.5,0.5,1)
_EmissionColor ("Emmisive Color", Color) = (0.5,0.5,0.5,1)
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_Outline ("Outline Width", Float) = 0.02
[Toggle] _OutlineUseTangent ("Use Tangent For Outline", Float) = 0
_SpecMulti ("Specular Multiply", Float) = 1
_Shininess ("Shininess", Range(0.1, 100)) = 2
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_FadeDistance ("Fade Start Distance", Range(0.1, 10)) = 0.5
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 1
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Base (RGB)", 2D) = "white" { }
_Ramp ("Toon Ramp (RGB)", 2D) = "white" { }
_SpecRamp ("Specular Ramp (RGB)", 2D) = "black" { }
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
_Emission ("Emission", Range(1, 100)) = 1
_EmissionBloomFactor ("Emission Bloom Factor", Float) = 1
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
[Toggle(WOUND_SYSTEM)] _WoundSystem ("Wound System", Float) = 1
[Toggle(DEBUG_WOUND_SYSTEM)] _DebugWoundSystem ("Debug Wound System", Float) = 0
_VertexTex ("Texture", 2D) = "white" { }
_MaskTex ("WoundMask (RGBA)", 2D) = "white" { }
[Enum(Left, 0, Right, 1)] _offSetX ("WoundMask U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY ("WoundMask V", Float) = 0
_MaskColor ("Wound Color", Color) = (1,1,1,1)
_WoundAlpha0 ("WoundAlpha Factor", Range(0, 1)) = 1
_WoundOffsetHead0 ("Wound Offset Head", Range(-1, 1)) = 0
_ColorScale0 ("ColorScale", Range(0, 5)) = 2.5
_BaseWoundScale ("Base Wound Scale", Range(0.1, 5)) = 1
_woundScaleX0 ("WoundScaleX", Range(0.01, 3)) = 1
_woundScaleZ0 ("WoundScaleZ", Range(0.01, 3)) = 1
_WoundPos0 ("WoundPos", Vector) = (0,0,0,0)
_WoundX0 ("WoundX", Vector) = (0,0,0,0)
_WoundY0 ("WoundY", Vector) = (0,0,0,0)
_WoundZ0 ("WoundZ", Vector) = (0,0,0,0)
_XPositionAdd ("_XPositionAdd", Vector) = (0,0,-1,0)
_YPositionAdd ("_YPositionAdd", Vector) = (0,-1,0,0)
_ZPositionAdd ("_ZPositionAdd", Vector) = (-1,0,0,0)
_BipScale ("_BipPosScale", Vector) = (0,0.056,0.981,0)
_TextureSize ("WoundTextureSize", Vector) = (128,32,0,0)
_MeshMaxLength ("Mesh Max Length", Float) = 2
_WoundClipMax ("Wound Clip Max", Float) = 1
_WoundClipMin ("Wound Clip Min", Float) = 0
[Enum(Left, 0, Right, 1)] _offSetX1 ("WoundMask1 U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY1 ("WoundMask1 V", Float) = 0
_MaskColor1 ("Wound Color Other", Color) = (1,1,1,1)
_WoundAlpha1 ("WoundAlpha Factor Other", Range(0, 1)) = 1
_WoundOffsetHead1 ("Wound Offset Head Other", Range(-1, 1)) = 0
_ColorScale1 ("ColorScale Other", Range(0, 5)) = 2.5
_woundScaleX1 ("WoundScaleX Other", Range(0.01, 3)) = 1
_woundScaleZ1 ("WoundScaleZ Other", Range(0.01, 3)) = 1
_WoundPos1 ("WoundPos Other", Vector) = (0,0,0,0)
_WoundX1 ("WoundX Other", Vector) = (0,0,0,0)
_WoundY1 ("WoundY Other", Vector) = (0,0,0,0)
_WoundZ1 ("WoundZ Other", Vector) = (0,0,0,0)
[Enum(Left, 0, Right, 1)] _offSetX2 ("WoundMask3 U", Float) = 0
[Enum(Down, 0, Up, 1)] _offSetY2 ("WoundMask3 V", Float) = 0
_MaskColor2 ("Wound Color2", Color) = (1,1,1,1)
_WoundAlpha2 ("WoundAlpha Factor 2", Range(0, 1)) = 1
_WoundOffsetHead2 ("Wound Offset Head 2", Range(-1, 1)) = 0
_ColorScale2 ("ColorScale 2", Range(0, 5)) = 2.5
_woundScaleX2 ("WoundScaleX 2", Range(0.01, 3)) = 1
_woundScaleZ2 ("WoundScaleZ 2", Range(0.01, 3)) = 1
_WoundPos2 ("WoundPos 2", Vector) = (0,0,0,0)
_WoundX2 ("WoundX 2", Vector) = (0,0,0,0)
_WoundY2 ("WoundY 2", Vector) = (0,0,0,0)
_WoundZ2 ("WoundZ 2", Vector) = (0,0,0,0)
[Toggle(TRANSPARENT)] _Transparent ("Transparent", Float) = 0
_MainAlpha ("Main Alpha Range(0, 1)", Range(0, 1)) = 1
_AdditiveLightIntensity ("Addtive Light Intensity", Range(0, 5)) = 1
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
}
SubShader {
 LOD 600
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "BASE"
  LOD 600
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 29882
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(49,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(49,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  highp vec4 scrpos_55;
  scrpos_55 = xlv_TEXCOORD6;
  mediump float a_56;
  a_56 = xlv_TEXCOORD6.z;
  if ((a_56 < 0.95)) {
    scrpos_55.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_56 = (a_56 * 17.0);
    highp float tmpvar_57;
    tmpvar_57 = (scrpos_55.y / 4.0);
    highp float tmpvar_58;
    tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
    highp float tmpvar_59;
    if ((tmpvar_57 >= 0.0)) {
      tmpvar_59 = tmpvar_58;
    } else {
      tmpvar_59 = -(tmpvar_58);
    };
    highp float tmpvar_60;
    tmpvar_60 = (scrpos_55.x / 4.0);
    highp float tmpvar_61;
    tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
    highp float tmpvar_62;
    if ((tmpvar_60 >= 0.0)) {
      tmpvar_62 = tmpvar_61;
    } else {
      tmpvar_62 = -(tmpvar_61);
    };
    highp float x_63;
    x_63 = ((a_56 - _DITHERMATRIX[
      int(tmpvar_59)
    ][
      int(tmpvar_62)
    ]) - 0.01);
    if ((x_63 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_64;
    scrpos_64 = xlv_TEXCOORD6;
    mediump float a_65;
    a_65 = _ClipAlpha;
    if ((a_65 < 0.99)) {
      scrpos_64.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_65 = (a_65 * 17.0);
      highp float tmpvar_66;
      tmpvar_66 = (scrpos_64.x / 4.0);
      highp float tmpvar_67;
      tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
      highp float tmpvar_68;
      if ((tmpvar_66 >= 0.0)) {
        tmpvar_68 = tmpvar_67;
      } else {
        tmpvar_68 = -(tmpvar_67);
      };
      highp float tmpvar_69;
      tmpvar_69 = ceil(tmpvar_68);
      highp float tmpvar_70;
      tmpvar_70 = (scrpos_64.y / 4.0);
      highp float tmpvar_71;
      tmpvar_71 = (fract(abs(tmpvar_70)) * 4.0);
      highp float tmpvar_72;
      if ((tmpvar_70 >= 0.0)) {
        tmpvar_72 = tmpvar_71;
      } else {
        tmpvar_72 = -(tmpvar_71);
      };
      mediump float tmpvar_73;
      tmpvar_73 = floor(a_65);
      highp float x_74;
      x_74 = ((tmpvar_73 - (tmpvar_69 * 
        ceil(tmpvar_72)
      )) - 0.01);
      if ((x_74 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((outColor_23.xyz * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_75;
  tmpvar_75.w = 0.0;
  tmpvar_75.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix ((_Color * _EnvColor), tmpvar_75, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_76.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = tex_C_Color_22.xyz;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((tex_C_Color_22.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 specRamp_20;
  mediump vec3 ramp_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_21 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26.xyz * _SpecMulti) + 1.0);
  specRamp_20 = tmpvar_27;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_28.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_28.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor);
  texMask0_16.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_32;
  texMask0_16.w = ((tmpvar_30.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_33.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_33.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor1);
  texMask1_10.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_37;
  texMask1_10.w = ((tmpvar_35.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_38;
  tmpvar_38 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_38.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_38.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_39 * _MaskColor2);
  texMask2_4.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_42;
  texMask2_4.w = ((tmpvar_40.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_43.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_47;
  mediump float tmpvar_48;
  tmpvar_48 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_46.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_47 = tmpvar_48;
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_49.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((outColor_23.xyz * (1.0 - 
    (tmpvar_44 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_47 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_53;
  tmpvar_53 = clamp ((1.0 - (tmpvar_44 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_54;
  tmpvar_54 = clamp ((1.0 - (tmpvar_47 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_52 + 
    ((tmpvar_30.xyz * tmpvar_44) * _ColorScale0)
  ) + (
    (tmpvar_35.xyz * tmpvar_47)
   * 
    (_ColorScale1 * tmpvar_53)
  )) + ((tmpvar_40.xyz * tmpvar_50) * (_ColorScale2 * tmpvar_54)));
  mediump vec3 tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_56 = (_RGBias + (tmpvar_57 * _RGScale));
  mediump vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_56 * _RGColor).xyz;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (tmpvar_56, 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = mix (outColor_23.xyz, tmpvar_58, vec3((tmpvar_59 * _RGRatio)));
  tmpvar_55 = tmpvar_60;
  outColor_23.xyz = tmpvar_55;
  highp vec4 scrpos_61;
  scrpos_61 = xlv_TEXCOORD6;
  mediump float a_62;
  a_62 = xlv_TEXCOORD6.z;
  if ((a_62 < 0.95)) {
    scrpos_61.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_62 = (a_62 * 17.0);
    highp float tmpvar_63;
    tmpvar_63 = (scrpos_61.y / 4.0);
    highp float tmpvar_64;
    tmpvar_64 = (fract(abs(tmpvar_63)) * 4.0);
    highp float tmpvar_65;
    if ((tmpvar_63 >= 0.0)) {
      tmpvar_65 = tmpvar_64;
    } else {
      tmpvar_65 = -(tmpvar_64);
    };
    highp float tmpvar_66;
    tmpvar_66 = (scrpos_61.x / 4.0);
    highp float tmpvar_67;
    tmpvar_67 = (fract(abs(tmpvar_66)) * 4.0);
    highp float tmpvar_68;
    if ((tmpvar_66 >= 0.0)) {
      tmpvar_68 = tmpvar_67;
    } else {
      tmpvar_68 = -(tmpvar_67);
    };
    highp float x_69;
    x_69 = ((a_62 - _DITHERMATRIX[
      int(tmpvar_65)
    ][
      int(tmpvar_68)
    ]) - 0.01);
    if ((x_69 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_70;
    scrpos_70 = xlv_TEXCOORD6;
    mediump float a_71;
    a_71 = _ClipAlpha;
    if ((a_71 < 0.99)) {
      scrpos_70.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_71 = (a_71 * 17.0);
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_70.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float tmpvar_75;
      tmpvar_75 = ceil(tmpvar_74);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_70.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      mediump float tmpvar_79;
      tmpvar_79 = floor(a_71);
      highp float x_80;
      x_80 = ((tmpvar_79 - (tmpvar_75 * 
        ceil(tmpvar_78)
      )) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_23.xyz = ((tmpvar_55 * specRamp_20) * (ramp_21 * _LightColor0));
  mediump vec4 tmpvar_81;
  tmpvar_81.w = 0.0;
  tmpvar_81.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_82;
  tmpvar_82 = mix ((_Color * _EnvColor), tmpvar_81, tex_C_Color_22.wwww);
  outColor_23.xyz = (outColor_23.xyz * tmpvar_82.xyz);
  outColor_23.w = xlv_COLOR0.w;
  outColor_23.w = clamp (outColor_23.w, 0.0, 1.0);
  tmpvar_1 = outColor_23;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downClipWound0_2;
  mediump float upClipWound0_3;
  mediump vec4 texMask0_4;
  highp vec2 uv1_5;
  highp vec2 uvStepX_6;
  highp vec2 scaleCenter0_7;
  scaleCenter0_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_7 = vec2(0.75, 0.75);
  };
  uvStepX_6.x = (0.5 * float(_offSetX));
  uvStepX_6.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_8;
  tmpvar_8 = (uvStepX_6 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_5.x = clamp (((
    ((tmpvar_8.x - scaleCenter0_7.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_7.x), (scaleCenter0_7.x - 0.25), (scaleCenter0_7.x + 0.25));
  uv1_5.y = clamp (((
    ((tmpvar_8.y - scaleCenter0_7.y) / _woundScaleZ0)
   + scaleCenter0_7.y) + _WoundOffsetHead0), (scaleCenter0_7.y - 0.25), (scaleCenter0_7.y + 0.25));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, uv1_5);
  mediump vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_9 * _MaskColor);
  texMask0_4.xyz = tmpvar_10.xyz;
  highp float tmpvar_11;
  tmpvar_11 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_3 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_2 = tmpvar_12;
  texMask0_4.w = ((tmpvar_10.w * _WoundAlpha0) * (upClipWound0_3 * downClipWound0_2));
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = texMask0_4.xyz;
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec4 tex_C_Color_20;
  mediump vec4 outColor_21;
  outColor_21.w = 0.0;
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_20 = tmpvar_22;
  outColor_21.xyz = (tex_C_Color_20.xyz + (tex_C_Color_20.xyz * xlv_TEXCOORD11));
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_23;
  tmpvar_23 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_23.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_23.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * _MaskColor);
  texMask0_16.xyz = tmpvar_25.xyz;
  highp float tmpvar_26;
  tmpvar_26 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_27;
  texMask0_16.w = ((tmpvar_25.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_28;
  tmpvar_28 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_28.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_28.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * _MaskColor1);
  texMask1_10.xyz = tmpvar_30.xyz;
  highp float tmpvar_31;
  tmpvar_31 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_32;
  texMask1_10.w = ((tmpvar_30.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_33;
  tmpvar_33 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_33.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_33.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * _MaskColor2);
  texMask2_4.xyz = tmpvar_35.xyz;
  highp float tmpvar_36;
  tmpvar_36 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_37;
  texMask2_4.w = ((tmpvar_35.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_38.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_41.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_42 = tmpvar_43;
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_44.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = ((outColor_21.xyz * (1.0 - 
    (tmpvar_39 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_42 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (tmpvar_39 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (tmpvar_42 * _ColorScale1)), 0.0, 1.0);
  outColor_21.xyz = (((tmpvar_47 + 
    ((tmpvar_25.xyz * tmpvar_39) * _ColorScale0)
  ) + (
    (tmpvar_30.xyz * tmpvar_42)
   * 
    (_ColorScale1 * tmpvar_48)
  )) + ((tmpvar_35.xyz * tmpvar_45) * (_ColorScale2 * tmpvar_49)));
  mediump vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_50;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(52,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  highp vec4 scrpos_74;
  scrpos_74 = xlv_TEXCOORD6;
  mediump float a_75;
  a_75 = xlv_TEXCOORD6.z;
  if ((a_75 < 0.95)) {
    scrpos_74.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_75 = (a_75 * 17.0);
    highp float tmpvar_76;
    tmpvar_76 = (scrpos_74.y / 4.0);
    highp float tmpvar_77;
    tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
    highp float tmpvar_78;
    if ((tmpvar_76 >= 0.0)) {
      tmpvar_78 = tmpvar_77;
    } else {
      tmpvar_78 = -(tmpvar_77);
    };
    highp float tmpvar_79;
    tmpvar_79 = (scrpos_74.x / 4.0);
    highp float tmpvar_80;
    tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
    highp float tmpvar_81;
    if ((tmpvar_79 >= 0.0)) {
      tmpvar_81 = tmpvar_80;
    } else {
      tmpvar_81 = -(tmpvar_80);
    };
    highp float x_82;
    x_82 = ((a_75 - _DITHERMATRIX[
      int(tmpvar_78)
    ][
      int(tmpvar_81)
    ]) - 0.01);
    if ((x_82 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD6;
    mediump float a_84;
    a_84 = _ClipAlpha;
    if ((a_84 < 0.99)) {
      scrpos_83.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.x / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = ceil(tmpvar_87);
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_83.y / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      mediump float tmpvar_92;
      tmpvar_92 = floor(a_84);
      highp float x_93;
      x_93 = ((tmpvar_92 - (tmpvar_88 * 
        ceil(tmpvar_91)
      )) - 0.01);
      if ((x_93 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((outColor_25.xyz * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_94;
  tmpvar_94.w = 0.0;
  tmpvar_94.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_95;
  tmpvar_95 = mix ((_Color * _EnvColor), tmpvar_94, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_95.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1289
#line 1328
#line 1376
#line 1385
#line 1434
#line 1758
#line 2078
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(55,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = tex_C_Color_24.xyz;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec3 specRamp_22;
  mediump vec3 ramp_23;
  mediump vec4 tex_C_Color_24;
  mediump vec4 outColor_25;
  outColor_25.w = 0.0;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_24 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_23 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28.xyz * _SpecMulti) + 1.0);
  specRamp_22 = tmpvar_29;
  outColor_25.xyz = (tex_C_Color_24.xyz + (tex_C_Color_24.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_31;
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (N_21, I_41)
   * N_21)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_25, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_25 = spColor_36;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_47.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_47.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor);
  texMask0_16.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_51;
  texMask0_16.w = ((tmpvar_49.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_52.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_52.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor1);
  texMask1_10.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_56;
  texMask1_10.w = ((tmpvar_54.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_57;
  tmpvar_57 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_57.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_57.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * _MaskColor2);
  texMask2_4.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_61;
  texMask2_4.w = ((tmpvar_59.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_62.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_65.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_66 = tmpvar_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_68.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = ((spColor_36.xyz * (1.0 - 
    (tmpvar_63 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_66 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (tmpvar_63 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_73;
  tmpvar_73 = clamp ((1.0 - (tmpvar_66 * _ColorScale1)), 0.0, 1.0);
  outColor_25.xyz = (((tmpvar_71 + 
    ((tmpvar_49.xyz * tmpvar_63) * _ColorScale0)
  ) + (
    (tmpvar_54.xyz * tmpvar_66)
   * 
    (_ColorScale1 * tmpvar_72)
  )) + ((tmpvar_59.xyz * tmpvar_69) * (_ColorScale2 * tmpvar_73)));
  mediump vec3 tmpvar_74;
  mediump float tmpvar_75;
  highp float tmpvar_76;
  tmpvar_76 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_75 = (_RGBias + (tmpvar_76 * _RGScale));
  mediump vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * _RGColor).xyz;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (tmpvar_75, 0.0, 1.0);
  highp vec3 tmpvar_79;
  tmpvar_79 = mix (outColor_25.xyz, tmpvar_77, vec3((tmpvar_78 * _RGRatio)));
  tmpvar_74 = tmpvar_79;
  outColor_25.xyz = tmpvar_74;
  highp vec4 scrpos_80;
  scrpos_80 = xlv_TEXCOORD6;
  mediump float a_81;
  a_81 = xlv_TEXCOORD6.z;
  if ((a_81 < 0.95)) {
    scrpos_80.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_81 = (a_81 * 17.0);
    highp float tmpvar_82;
    tmpvar_82 = (scrpos_80.y / 4.0);
    highp float tmpvar_83;
    tmpvar_83 = (fract(abs(tmpvar_82)) * 4.0);
    highp float tmpvar_84;
    if ((tmpvar_82 >= 0.0)) {
      tmpvar_84 = tmpvar_83;
    } else {
      tmpvar_84 = -(tmpvar_83);
    };
    highp float tmpvar_85;
    tmpvar_85 = (scrpos_80.x / 4.0);
    highp float tmpvar_86;
    tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
    highp float tmpvar_87;
    if ((tmpvar_85 >= 0.0)) {
      tmpvar_87 = tmpvar_86;
    } else {
      tmpvar_87 = -(tmpvar_86);
    };
    highp float x_88;
    x_88 = ((a_81 - _DITHERMATRIX[
      int(tmpvar_84)
    ][
      int(tmpvar_87)
    ]) - 0.01);
    if ((x_88 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD6;
    mediump float a_90;
    a_90 = _ClipAlpha;
    if ((a_90 < 0.99)) {
      scrpos_89.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.x / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = ceil(tmpvar_93);
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_89.y / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      mediump float tmpvar_98;
      tmpvar_98 = floor(a_90);
      highp float x_99;
      x_99 = ((tmpvar_98 - (tmpvar_94 * 
        ceil(tmpvar_97)
      )) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_25.xyz = ((tmpvar_74 * specRamp_22) * (ramp_23 * _LightColor0));
  mediump vec4 tmpvar_100;
  tmpvar_100.w = 0.0;
  tmpvar_100.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_101;
  tmpvar_101 = mix ((_Color * _EnvColor), tmpvar_100, tex_C_Color_24.wwww);
  outColor_25.xyz = (outColor_25.xyz * tmpvar_101.xyz);
  outColor_25.w = xlv_COLOR0.w;
  outColor_25.w = clamp (outColor_25.w, 0.0, 1.0);
  tmpvar_1 = outColor_25;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 736
#line 1038
#line 1099
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(58,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = tex_C_Color_22.xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF3
    #define UNITY_PBS_USE_BRDF3 1
#endif
#ifndef UNITY_NO_FULL_STANDARD_SHADER
    #define UNITY_NO_FULL_STANDARD_SHADER 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER1
    #define UNITY_HARDWARE_TIER1 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(64,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER2
    #define UNITY_HARDWARE_TIER2 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
#ifndef SHADER_TARGET
    #define SHADER_TARGET 30
#endif
#ifndef UNITY_NO_DXT5nm
    #define UNITY_NO_DXT5nm 1
#endif
#ifndef UNITY_NO_RGBM
    #define UNITY_NO_RGBM 1
#endif
#ifndef UNITY_ENABLE_REFLECTION_BUFFERS
    #define UNITY_ENABLE_REFLECTION_BUFFERS 1
#endif
#ifndef UNITY_FRAMEBUFFER_FETCH_AVAILABLE
    #define UNITY_FRAMEBUFFER_FETCH_AVAILABLE 1
#endif
#ifndef UNITY_NO_CUBEMAP_ARRAY
    #define UNITY_NO_CUBEMAP_ARRAY 1
#endif
#ifndef UNITY_NO_SCREENSPACE_SHADOWS
    #define UNITY_NO_SCREENSPACE_SHADOWS 1
#endif
#ifndef UNITY_PBS_USE_BRDF2
    #define UNITY_PBS_USE_BRDF2 1
#endif
#ifndef SHADER_API_MOBILE
    #define SHADER_API_MOBILE 1
#endif
#ifndef UNITY_HARDWARE_TIER3
    #define UNITY_HARDWARE_TIER3 1
#endif
#ifndef UNITY_COLORSPACE_GAMMA
    #define UNITY_COLORSPACE_GAMMA 1
#endif
#ifndef UNITY_LIGHTMAP_DLDR_ENCODING
    #define UNITY_LIGHTMAP_DLDR_ENCODING 1
#endif
#ifndef VERTEXLIGHT_ON
    #define VERTEXLIGHT_ON 1
#endif
#ifndef SPECIAL_STATE
    #define SPECIAL_STATE 1
#endif
#ifndef RIM_GLOW
    #define RIM_GLOW 1
#endif
#ifndef WOUND_SYSTEM
    #define WOUND_SYSTEM 1
#endif
#ifndef DEBUG_WOUND_SYSTEM
    #define DEBUG_WOUND_SYSTEM 1
#endif
#ifndef UNITY_VERSION
    #define UNITY_VERSION 201758
#endif
#ifndef SHADER_STAGE_VERTEX
    #define SHADER_STAGE_VERTEX 1
#endif
#ifndef SHADER_API_GLES
    #define SHADER_API_GLES 1
#endif
#extension GL_EXT_gpu_shader4 : require
#define gl_Vertex _glesVertex
attribute vec4 _glesVertex;
#define gl_Normal _glesNormal
attribute vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
attribute vec4 _glesMultiTexCoord0;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
mat3 xll_constructMat3_mf4x4( mat4 m) {
  return mat3( vec3( m[0]), vec3( m[1]), vec3( m[2]));
}
#line 447
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 756
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 749
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 304
struct v2f {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 125
struct appdata {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 328
struct v2fSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec4 scrpos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vertexLightColor;
};
#line 133
struct appdataSpec {
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
    highp vec4 color;
    highp vec4 tangent;
};
#line 188
struct v2fWoundRimMask {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 152
struct appdataWoundRimMask {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
};
#line 218
struct v2fWoundRimMaskSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 163
struct appdataWoundRimMaskSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 246
struct v2fWoundSpec {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 normal;
    highp vec3 viewDir;
    highp vec4 vertexColor;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec4 scrpos;
    highp vec3 vertexLightColor;
};
#line 175
struct appdataWoundSpec {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    highp vec4 tangent;
};
#line 275
struct v2fWound {
    highp vec4 position;
    highp vec4 color;
    mediump vec2 uv_MainTex;
    mediump vec2 dd;
    mediump vec2 ss;
    highp vec3 normal;
    highp vec4 spuvs;
    highp vec3 objPos;
    highp vec3 viewDir;
    highp vec4 scrpos;
    highp vec3 vTextureCoords0;
    highp vec3 vTextureCoords1;
    highp vec3 vTextureCoords2;
    highp vec3 vertexLightColor;
};
#line 142
struct appdataWound {
    highp int vid;
    highp vec4 position;
    highp vec3 normal;
    mediump vec2 uv_MainTex;
};
#line 40
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
#line 46
uniform highp vec3 _WorldSpaceCameraPos;
#line 53
uniform highp vec4 _ProjectionParams;
#line 59
uniform highp vec4 _ScreenParams;
#line 71
uniform highp vec4 _ZBufferParams;
#line 77
uniform highp vec4 unity_OrthoParams;
#line 82
uniform highp vec4 unity_CameraWorldClipPlanes[6];
#line 88
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_CameraInvProjection;
uniform highp mat4 unity_WorldToCamera;
uniform highp mat4 unity_CameraToWorld;
#line 104
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
#line 108
uniform highp vec4 _LightProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
#line 112
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
#line 118
uniform highp vec4 unity_LightPosition[8];
#line 123
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
#line 127
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
#line 131
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
#line 136
uniform lowp vec4 unity_OcclusionMaskSelector;
uniform lowp vec4 unity_ProbesOcclusion;
#line 141
uniform mediump vec3 unity_LightColor0;
uniform mediump vec3 unity_LightColor1;
uniform mediump vec3 unity_LightColor2;
uniform mediump vec3 unity_LightColor3;
#line 148
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _LightSplitsNear;
#line 152
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_WorldToShadow[4];
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
#line 161
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_LODFade;
uniform highp vec4 unity_WorldTransformParams;
#line 202
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 210
uniform lowp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 unity_AmbientSky;
uniform lowp vec4 unity_AmbientEquator;
uniform lowp vec4 unity_AmbientGround;
#line 214
uniform lowp vec4 unity_IndirectSpecColor;
uniform highp mat4 glstate_matrix_projection;
#line 218
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp int unity_StereoEyeIndex;
#line 224
uniform lowp vec4 unity_ShadowColor;
#line 231
uniform lowp vec4 unity_FogColor;
#line 236
uniform highp vec4 unity_FogParams;
#line 244
uniform mediump sampler2D unity_Lightmap;
uniform mediump sampler2D unity_LightmapInd;
#line 258
uniform sampler2D unity_DynamicLightmap;
uniform sampler2D unity_DynamicDirectionality;
uniform sampler2D unity_DynamicNormal;
#line 263
uniform highp vec4 unity_LightmapST;
uniform highp vec4 unity_DynamicLightmapST;
#line 271
uniform samplerCube unity_SpecCube0;
uniform samplerCube unity_SpecCube1;
#line 275
uniform highp vec4 unity_SpecCube0_BoxMax;
uniform highp vec4 unity_SpecCube0_BoxMin;
uniform highp vec4 unity_SpecCube0_ProbePosition;
uniform mediump vec4 unity_SpecCube0_HDR;
#line 280
uniform highp vec4 unity_SpecCube1_BoxMax;
uniform highp vec4 unity_SpecCube1_BoxMin;
uniform highp vec4 unity_SpecCube1_ProbePosition;
uniform mediump vec4 unity_SpecCube1_HDR;
#line 320
highp mat4 unity_MatrixMVP;
highp mat4 unity_MatrixMV;
highp mat4 unity_MatrixTMV;
highp mat4 unity_MatrixITMV;
#line 9
#line 14
#line 84
#line 93
#line 103
#line 112
#line 124
#line 135
#line 141
#line 147
#line 151
#line 157
#line 163
#line 169
#line 175
#line 186
#line 201
#line 208
#line 223
#line 230
#line 237
#line 255
#line 291
#line 320
#line 326
#line 339
#line 357
#line 373
#line 427
#line 453
#line 464
#line 473
#line 480
#line 485
#line 502
#line 522
#line 537
#line 543
#line 554
uniform mediump vec4 unity_Lightmap_HDR;
uniform mediump vec4 unity_DynamicLightmap_HDR;
#line 568
#line 578
#line 593
#line 602
#line 609
#line 618
#line 626
#line 635
#line 654
#line 660
#line 670
#line 680
#line 691
#line 696
#line 702
#line 707
#line 764
#line 770
#line 785
#line 816
#line 830
#line 834
#line 840
#line 849
#line 859
#line 885
#line 891
#line 7
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
#line 11
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _SkyBoxFogEffectLimit;
uniform highp float _FogStartDistance;
#line 15
uniform highp float _FogEndDistance;
uniform mediump float _FogHighStartDistance;
uniform mediump float _FogHighIntensity;
#line 19
uniform mediump float _FogHighEffectLimit;
#line 5
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams;
#line 12
uniform highp vec4 _HeigtFogRamp;
#line 18
uniform highp vec4 _HeigtFogColBase;
#line 22
uniform highp vec4 _HeigtFogColDelta;
#line 26
uniform highp vec4 _HeigtFogColParams;
#line 32
uniform highp vec4 _HeigtFogRadialCol;
#line 36
uniform highp vec4 _Mihoyo_FogColor;
#line 48
#line 87
uniform highp vec4 _HeigtFogParams2;
#line 135
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
#line 140
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
#line 144
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
#line 149
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
#line 153
uniform highp vec4 _Mihoyo_FogColor3;
#line 171
#line 210
#line 249
#line 382
#line 31
#line 62
#line 113
#line 133
#line 151
#line 169
#line 180
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
#line 184
uniform highp vec4 _UWFogColorLow;
#line 188
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWFogDensity;
#line 192
uniform highp float _UWHeightFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
#line 197
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogDistStart;
#line 201
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
#line 205
uniform highp float _UWHeightRatio;
#line 245
#line 305
#line 330
#line 8
#line 17
#line 29
#line 50
#line 91
#line 102
#line 114
#line 127
#line 133
#line 188
uniform mediump float _lightProbToggle;
uniform mediump vec4 _lightProbColor;
#line 202
#line 234
uniform highp mat4 _DITHERMATRIX;
#line 259
#line 13
#line 18
#line 23
#line 28
#line 33
#line 42
uniform highp float _Transparent;
#line 4
uniform highp float _ReceiveDynamicShadow;
#line 12
#line 20
uniform sampler2D _SPTex;
uniform sampler2D _SPTex_Alpha;
uniform highp vec4 _SPTex_ST;
uniform sampler2D _SPNoiseTex;
#line 24
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPEmissionScaler;
#line 28
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform mediump vec4 _SPOutlineColor;
#line 32
uniform highp float _SPTransitionEmissionScaler;
uniform highp float _SPTransitionBloomFactor;
#line 36
uniform samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
#line 40
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
#line 46
#line 55
#line 65
#line 93
#line 125
#line 154
#line 178
#line 207
#line 238
#line 264
#line 284
#line 368
#line 403
#line 9
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
#line 13
uniform highp float _RGRatio;
uniform highp float _RGBloomFactor;
uniform highp int _RGBlendType;
#line 17
uniform highp float _RGMaskR;
uniform highp float _RGMaskG;
uniform highp float _RGMaskB;
uniform highp float _RGMaskA;
#line 21
uniform highp float _RGMaskIntensity;
uniform mediump vec4 _HRRimColor2;
#line 25
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
#line 29
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
#line 45
#line 51
#line 84
#line 105
#line 117
#line 146
#line 181
#line 1
uniform sampler2D _VertexTex;
uniform highp vec4 _VertexTex_TexelSize;
uniform highp int _VertexCount;
#line 5
uniform highp vec3 _MeshSize;
uniform highp vec3 _MeshCenter;
uniform highp int _MeshTopologyNum;
uniform highp vec4 _BipScale;
#line 9
uniform highp float _MeshMaxLength;
uniform highp vec4 _TextureSize;
#line 13
#line 23
#line 32
#line 25
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform highp float _Opaqueness;
uniform sampler2D _MainTex;
#line 29
uniform mediump vec4 _MainTex_ST;
uniform sampler2D _Ramp;
uniform highp float _FadeDistance;
uniform highp float _FadeOffset;
#line 33
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform highp float _Shininess;
uniform mediump float _SpecularIntensity;
#line 37
uniform mediump float _BloomFactor;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
#line 41
uniform mediump vec4 _EmissionColor;
uniform mediump float _EmissionBloomFactor;
uniform mediump vec4 _ClipPlane;
#line 46
uniform mediump float _MainAlpha;
uniform highp float _DitherAlpha;
uniform highp float _ClipAlpha;
#line 50
uniform highp float _UsingClipAlpha;
uniform mediump float _OpaquenessFromTex;
#line 54
uniform mediump vec4 _XPositionAdd;
uniform mediump vec4 _YPositionAdd;
uniform mediump vec4 _ZPositionAdd;
#line 58
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
#line 63
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskTex_ST;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
#line 67
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
#line 71
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
#line 75
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
#line 79
uniform mediump float _ColorScale0;
uniform mediump vec4 _WoundPos0;
uniform mediump vec4 _WoundX0;
#line 83
uniform mediump vec4 _WoundY0;
uniform mediump vec4 _WoundZ0;
#line 87
uniform sampler2D _MaskTex1;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
#line 92
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
#line 96
uniform mediump vec4 _WoundPos1;
uniform mediump vec4 _WoundX1;
uniform mediump vec4 _WoundY1;
uniform mediump vec4 _WoundZ1;
#line 102
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
#line 106
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
uniform mediump vec4 _WoundPos2;
#line 110
uniform mediump vec4 _WoundX2;
uniform mediump vec4 _WoundY2;
uniform mediump vec4 _WoundZ2;
#line 115
uniform sampler2D _LightMap;
uniform mediump vec2 _DiffuseRanges;
uniform mediump vec4 _SpecularColor;
#line 120
uniform mediump vec4 _RimColor;
uniform mediump float _RimPower;
uniform mediump float _RimEdge;
#line 354
#line 408
#line 454
#line 736
#line 1038
#line 1099
#line 1154
#line 1211
#line 1251
#line 1289
#line 1328
#line 1434
#line 1758
#line 2237
#line 2397
#line 2443
#line 2502
#line 2538
#line 255
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    #line 259
    highp vec4 toLightY = (lightPosY - pos.y);
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    #line 263
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    lengthSq += (toLightZ * toLightZ);
    #line 267
    lengthSq = max( lengthSq, vec4( 1e-06));
    highp vec4 ndotl = vec4( 0.0);
    #line 271
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    ndotl += (toLightZ * normal.z);
    #line 275
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 279
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    #line 283
    col += (lightColor1 * diff.y);
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 259
mediump vec3 ApplyPointLight( in highp vec3 worldPos, in highp vec3 worldNormal ) {
    return Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldNormal);
}
#line 785
highp vec4 ComputeNonStereoScreenPos( in highp vec4 pos ) {
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    #line 789
    return o;
}
#line 792
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 793
    highp vec4 o = ComputeNonStereoScreenPos( pos);
    #line 797
    return o;
}
#line 23
highp vec2 GetVertexPositionUV( in highp int idx ) {
    highp float idxX = mod(float(idx), _VertexTex_TexelSize.z);
    highp float idxY = (1.0 + float(int((float(idx) / _VertexTex_TexelSize.z))));
    #line 27
    return vec2( (idxX / _VertexTex_TexelSize.z), (idxY / _VertexTex_TexelSize.w));
}
#line 32
highp vec3 GetVertexPosition( in highp int idx ) {
    highp vec2 uv = GetVertexPositionUV( idx);
    highp vec3 pos = xll_tex2Dlod( _VertexTex, vec4( uv, 0.0, 0.0)).xyz;
    #line 38
    return vec3( ((((pos.x - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.x), ((((pos.y - 0.5) * _MeshMaxLength) * 2.0) + _BipScale.y), ((((pos.z - 0.5) * _MeshMaxLength) * 2.0) - _BipScale.z));
}
#line 9
highp vec4 UnityObjectToClipPos( in highp vec3 pos ) {
    return (unity_MatrixVP * (unity_ObjectToWorld * vec4( pos, 1.0)));
}
#line 14
highp vec4 UnityObjectToClipPos( in highp vec4 pos ) {
    return UnityObjectToClipPos( pos.xyz);
}
#line 175
highp vec3 UnityObjectToWorldNormal( in highp vec3 norm ) {
    #line 181
    return normalize((norm * xll_constructMat3_mf4x4( unity_WorldToObject)));
}
#line 46
void spVert( in highp vec4 vertex, in highp vec2 uv, out highp vec4 spuvs ) {
    highp vec4 position = (vertex * 0.5);
    #line 50
    spuvs.xy = ((uv.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
    spuvs.zw = vec2( (position.x + (position.z * position.z)), ((position.y + (0.5 * position.z)) + ((0.5 * position.x) * position.x)));
    spuvs.zw = ((spuvs.zw.xy * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}
#line 836
v2fWound vertWound_transparent( in appdataWound in_data ) {
    #line 838
    v2fWound outData = v2fWound(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
    outData.position = UnityObjectToClipPos( in_data.position);
    #line 843
    outData.uv_MainTex = ((in_data.uv_MainTex.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 L = vec3( normalize(_WorldSpaceLightPos0));
    #line 847
    highp vec3 N = normalize(UnityObjectToWorldNormal( in_data.normal));
    mediump float d = ((dot( N, L) * 0.4975) + 0.5);
    outData.dd = vec2( d, d);
    #line 853
    highp vec4 verPos = (unity_ObjectToWorld * in_data.position);
    highp vec3 V = (_WorldSpaceCameraPos - verPos.xyz);
    V = normalize(V);
    highp vec3 H = normalize((L + V));
    #line 857
    mediump float s = pow( max( dot( N, H), 0.0), _Shininess);
    s = (( (d < 0.5) ) ? ( 0.025 ) : ( s ));
    outData.ss = vec2( s, s);
    #line 863
    mediump float alpha = 1.0;
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 868
    outData.color.w = (alpha * _Opaqueness);
    outData.normal = N;
    #line 872
    spVert( in_data.position, in_data.uv_MainTex, outData.spuvs);
    highp vec4 objPos = verPos;
    outData.objPos = (objPos.xyz / objPos.w);
    #line 879
    outData.viewDir = V;
    #line 883
    outData.vertexLightColor.xyz = ApplyPointLight( vec3( verPos), N);
    #line 888
    highp vec3 Prevertexpos = GetVertexPosition( in_data.vid);
    highp vec3 modelVertex = vec3( (((Prevertexpos.x * _XPositionAdd.x) + (Prevertexpos.y * _XPositionAdd.y)) + (Prevertexpos.z * _XPositionAdd.z)), (((Prevertexpos.x * _YPositionAdd.x) + (Prevertexpos.y * _YPositionAdd.y)) + (Prevertexpos.z * _YPositionAdd.z)), (((Prevertexpos.x * _ZPositionAdd.x) + (Prevertexpos.y * _ZPositionAdd.y)) + (Prevertexpos.z * _ZPositionAdd.z)));
    #line 893
    highp vec4 wound0Pos = vec4( _WoundPos0.x, _WoundPos0.y, _WoundPos0.z, 1.0);
    highp vec3 VertexOffset = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound0Pos.x, wound0Pos.y, wound0Pos.z));
    highp vec3 vEllipsoidPosition;
    #line 897
    vEllipsoidPosition.x = dot( vec3( _WoundX0.x, _WoundX0.y, _WoundX0.z), VertexOffset.xyz);
    vEllipsoidPosition.y = dot( vec3( _WoundY0.x, _WoundY0.y, _WoundY0.z), VertexOffset.xyz);
    vEllipsoidPosition.z = dot( vec3( _WoundZ0.x, _WoundZ0.y, _WoundZ0.z), VertexOffset.xyz);
    #line 901
    outData.vTextureCoords0.xyz = vec3( vEllipsoidPosition.x, vEllipsoidPosition.z, vEllipsoidPosition.y);
    highp vec4 wound1Pos = vec4( _WoundPos1.x, _WoundPos1.y, _WoundPos1.z, 1.0);
    #line 905
    highp vec3 VertexOffsetWound1 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound1Pos.x, wound1Pos.y, wound1Pos.z));
    highp vec3 vEllipsoidPositionWound1;
    vEllipsoidPositionWound1.x = dot( vec3( _WoundX1.x, _WoundX1.y, _WoundX1.z), VertexOffsetWound1.xyz);
    vEllipsoidPositionWound1.y = dot( vec3( _WoundY1.x, _WoundY1.y, _WoundY1.z), VertexOffsetWound1.xyz);
    #line 909
    vEllipsoidPositionWound1.z = dot( vec3( _WoundZ1.x, _WoundZ1.y, _WoundZ1.z), VertexOffsetWound1.xyz);
    outData.vTextureCoords1.xyz = vec3( vEllipsoidPositionWound1.x, vEllipsoidPositionWound1.z, vEllipsoidPositionWound1.y);
    #line 915
    highp vec4 wound2Pos = vec4( _WoundPos2.x, _WoundPos2.y, _WoundPos2.z, 1.0);
    highp vec3 VertexOffsetWound2 = (vec3( (-modelVertex.z), (-modelVertex.x), modelVertex.y) - vec3( wound2Pos.x, wound2Pos.y, wound2Pos.z));
    highp vec3 vEllipsoidPositionWound2;
    vEllipsoidPositionWound2.x = dot( vec3( _WoundX2.x, _WoundX2.y, _WoundX2.z), VertexOffsetWound2.xyz);
    #line 919
    vEllipsoidPositionWound2.y = dot( vec3( _WoundY2.x, _WoundY2.y, _WoundY2.z), VertexOffsetWound2.xyz);
    vEllipsoidPositionWound2.z = dot( vec3( _WoundZ2.x, _WoundZ2.y, _WoundZ2.z), VertexOffsetWound2.xyz);
    outData.vTextureCoords2.xyz = vec3( vEllipsoidPositionWound2.x, vEllipsoidPositionWound2.z, vEllipsoidPositionWound2.y);
    #line 926
    outData.position = UnityObjectToClipPos( modelVertex);
    outData.scrpos = ComputeScreenPos( outData.position);
    outData.scrpos.z = _DitherAlpha;
    #line 933
    return outData;
}
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main() {
unity_MatrixMVP = (unity_MatrixVP * unity_ObjectToWorld);
unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
unity_MatrixTMV = xll_transpose_mf4x4(unity_MatrixMV);
unity_MatrixITMV = xll_transpose_mf4x4((unity_WorldToObject * unity_MatrixInvV));
    v2fWound xl_retval;
    appdataWound xlt_in_data;
    xlt_in_data.vid = int(gl_VertexID);
    xlt_in_data.position = vec4(gl_Vertex);
    xlt_in_data.normal = vec3(gl_Normal);
    xlt_in_data.uv_MainTex = vec2(gl_MultiTexCoord0);
    xl_retval = vertWound_transparent( xlt_in_data);
    gl_Position = vec4(xl_retval.position);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec2(xl_retval.uv_MainTex);
    xlv_TEXCOORD1 = vec2(xl_retval.dd);
    xlv_TEXCOORD2 = vec2(xl_retval.ss);
    xlv_TEXCOORD4 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval.spuvs);
    xlv_TEXCOORD10 = vec3(xl_retval.objPos);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval.scrpos);
    xlv_TEXCOORD7 = vec3(xl_retval.vTextureCoords0);
    xlv_TEXCOORD8 = vec3(xl_retval.vTextureCoords1);
    xlv_TEXCOORD9 = vec3(xl_retval.vTextureCoords2);
    xlv_TEXCOORD11 = vec3(xl_retval.vertexLightColor);
}
/* HLSL2GLSL - NOTE: GLSL optimization failed
(61,12): error: extension `GL_EXT_gpu_shader4' unsupported in vertex shader
*/

#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform sampler2D _MainTex;
uniform mediump float _WoundClipMax;
uniform mediump float _WoundClipMin;
uniform mediump float _BaseWoundScale;
uniform sampler2D _MaskTex;
uniform mediump vec4 _MaskColor;
uniform mediump vec4 _MaskColor1;
uniform mediump vec4 _MaskColor2;
uniform highp int _offSetX;
uniform highp int _offSetY;
uniform highp int _offSetX1;
uniform highp int _offSetY1;
uniform highp int _offSetX2;
uniform highp int _offSetY2;
uniform mediump float _woundScaleX0;
uniform mediump float _woundScaleZ0;
uniform mediump float _WoundOffsetHead0;
uniform mediump float _WoundAlpha0;
uniform mediump float _ColorScale0;
uniform mediump float _woundScaleX1;
uniform mediump float _woundScaleZ1;
uniform mediump float _WoundOffsetHead1;
uniform mediump float _WoundAlpha1;
uniform mediump float _ColorScale1;
uniform mediump float _woundScaleX2;
uniform mediump float _woundScaleZ2;
uniform mediump float _WoundOffsetHead2;
uniform mediump float _WoundAlpha2;
uniform mediump float _ColorScale2;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump float downclipwound2_2;
  mediump float upclipwound2_3;
  mediump vec4 texMask2_4;
  highp vec2 uv3_5;
  highp vec2 uvStepZ_6;
  highp vec2 scaleCenter2_7;
  mediump float downClipWound1_8;
  mediump float upClipWound1_9;
  mediump vec4 texMask1_10;
  highp vec2 uv2_11;
  highp vec2 uvStepY_12;
  highp vec2 scaleCenter1_13;
  mediump float downClipWound0_14;
  mediump float upClipWound0_15;
  mediump vec4 texMask0_16;
  highp vec2 uv1_17;
  highp vec2 uvStepX_18;
  highp vec2 scaleCenter0_19;
  mediump vec3 V_20;
  mediump vec3 N_21;
  mediump vec4 tex_C_Color_22;
  mediump vec4 outColor_23;
  outColor_23.w = 0.0;
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_22 = tmpvar_24;
  outColor_23.xyz = (tex_C_Color_22.xyz + (tex_C_Color_22.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD4);
  N_21 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_20 = tmpvar_26;
  mediump vec3 reflection_27;
  mediump vec3 R_28;
  mediump float intensity_29;
  mediump vec4 noiseTex_30;
  mediump vec4 spColor_31;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_31 = tmpvar_32;
  spColor_31.w = (spColor_31.w * _SPOpaqueness);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_30 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = (((1.99 * tmpvar_33.x) * _SPNoiseScaler) - 1.0);
  intensity_29 = tmpvar_34;
  highp vec3 tmpvar_35;
  highp vec3 I_36;
  I_36 = ((normalize(
    (V_20 - _WorldSpaceCameraPos)
  ) + (noiseTex_30 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_35 = (I_36 - (2.0 * (
    dot (N_21, I_36)
   * N_21)));
  R_28 = tmpvar_35;
  lowp vec3 tmpvar_37;
  tmpvar_37 = textureCube (_SPCubeMap, R_28).xyz;
  reflection_27 = tmpvar_37;
  highp vec3 tmpvar_38;
  mediump vec3 x_39;
  x_39 = (spColor_31.xyz * _SPOldColor.xyz);
  tmpvar_38 = mix (x_39, ((reflection_27 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_31.xyz = tmpvar_38;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_29 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_29 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_40;
      tmpvar_40 = mix (spColor_31.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_29) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_31.xyz = tmpvar_40;
    };
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = mix (outColor_23, spColor_31, vec4(xlat_mutable_SPIntensity));
  spColor_31 = tmpvar_41;
  outColor_23 = spColor_31;
  scaleCenter0_19 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX)) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX) || bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX) && !(bool(_offSetY)))) {
    scaleCenter0_19 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX) && bool(_offSetY))) {
    scaleCenter0_19 = vec2(0.75, 0.75);
  };
  uvStepX_18.x = (0.5 * float(_offSetX));
  uvStepX_18.y = (0.5 * float(_offSetY));
  highp vec2 tmpvar_42;
  tmpvar_42 = (uvStepX_18 + (xlv_TEXCOORD7.xy * 0.5));
  uv1_17.x = clamp (((
    ((tmpvar_42.x - scaleCenter0_19.x) / _woundScaleX0)
   * _BaseWoundScale) + scaleCenter0_19.x), (scaleCenter0_19.x - 0.25), (scaleCenter0_19.x + 0.25));
  uv1_17.y = clamp (((
    ((tmpvar_42.y - scaleCenter0_19.y) / _woundScaleZ0)
   + scaleCenter0_19.y) + _WoundOffsetHead0), (scaleCenter0_19.y - 0.25), (scaleCenter0_19.y + 0.25));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_MaskTex, uv1_17);
  mediump vec4 tmpvar_44;
  tmpvar_44 = (tmpvar_43 * _MaskColor);
  texMask0_16.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  tmpvar_45 = float((_WoundClipMax >= xlv_TEXCOORD7.z));
  upClipWound0_15 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((xlv_TEXCOORD7.z >= _WoundClipMin));
  downClipWound0_14 = tmpvar_46;
  texMask0_16.w = ((tmpvar_44.w * _WoundAlpha0) * (upClipWound0_15 * downClipWound0_14));
  scaleCenter1_13 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX1)) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX1) || bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX1) && !(bool(_offSetY1)))) {
    scaleCenter1_13 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX1) && bool(_offSetY1))) {
    scaleCenter1_13 = vec2(0.75, 0.75);
  };
  uvStepY_12.x = (0.5 * float(_offSetX1));
  uvStepY_12.y = (0.5 * float(_offSetY1));
  highp vec2 tmpvar_47;
  tmpvar_47 = (uvStepY_12 + (xlv_TEXCOORD8.xy * 0.5));
  uv2_11.x = clamp (((
    ((tmpvar_47.x - scaleCenter1_13.x) / _woundScaleX1)
   * _BaseWoundScale) + scaleCenter1_13.x), (scaleCenter1_13.x - 0.25), (scaleCenter1_13.x + 0.25));
  uv2_11.y = clamp (((
    ((tmpvar_47.y - scaleCenter1_13.y) / _woundScaleZ1)
   + scaleCenter1_13.y) + _WoundOffsetHead1), (scaleCenter1_13.y - 0.25), (scaleCenter1_13.y + 0.25));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_MaskTex, uv2_11);
  mediump vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_48 * _MaskColor1);
  texMask1_10.xyz = tmpvar_49.xyz;
  highp float tmpvar_50;
  tmpvar_50 = float((_WoundClipMax >= xlv_TEXCOORD8.z));
  upClipWound1_9 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = float((xlv_TEXCOORD8.z >= _WoundClipMin));
  downClipWound1_8 = tmpvar_51;
  texMask1_10.w = ((tmpvar_49.w * _WoundAlpha1) * (upClipWound1_9 * downClipWound1_8));
  scaleCenter2_7 = vec2(0.5, 0.5);
  if ((!(bool(_offSetX2)) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.25, 0.75);
  };
  if (!((bool(_offSetX2) || bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.25, 0.25);
  };
  if ((bool(_offSetX2) && !(bool(_offSetY2)))) {
    scaleCenter2_7 = vec2(0.75, 0.25);
  };
  if ((bool(_offSetX2) && bool(_offSetY2))) {
    scaleCenter2_7 = vec2(0.75, 0.75);
  };
  uvStepZ_6.x = (0.5 * float(_offSetX2));
  uvStepZ_6.y = (0.5 * float(_offSetY2));
  highp vec2 tmpvar_52;
  tmpvar_52 = (uvStepZ_6 + (xlv_TEXCOORD9.xy * 0.5));
  uv3_5.x = clamp (((
    ((tmpvar_52.x - scaleCenter2_7.x) / _woundScaleX2)
   * _BaseWoundScale) + scaleCenter2_7.x), (scaleCenter2_7.x - 0.25), (scaleCenter2_7.x + 0.25));
  uv3_5.y = clamp (((
    ((tmpvar_52.y - scaleCenter2_7.y) / _woundScaleZ2)
   + scaleCenter2_7.y) + _WoundOffsetHead2), (scaleCenter2_7.y - 0.25), (scaleCenter2_7.y + 0.25));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_MaskTex, uv3_5);
  mediump vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_53 * _MaskColor2);
  texMask2_4.xyz = tmpvar_54.xyz;
  highp float tmpvar_55;
  tmpvar_55 = float((_WoundClipMax >= xlv_TEXCOORD9.z));
  upclipwound2_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = float((xlv_TEXCOORD9.z >= _WoundClipMin));
  downclipwound2_2 = tmpvar_56;
  texMask2_4.w = ((tmpvar_54.w * _WoundAlpha2) * (upclipwound2_3 * downclipwound2_2));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_58;
  mediump float tmpvar_59;
  tmpvar_59 = clamp (((
    ((1.1 * texMask0_16.w) + tmpvar_57.y)
   - 1.0) / texMask0_16.w), 0.0, 1.0);
  tmpvar_58 = tmpvar_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp (((
    ((1.1 * texMask1_10.w) + tmpvar_60.y)
   - 1.0) / texMask1_10.w), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_MaskTex, uv1_17);
  highp float tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp (((
    ((1.1 * texMask2_4.w) + tmpvar_63.y)
   - 1.0) / texMask2_4.w), 0.0, 1.0);
  tmpvar_64 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = ((spColor_31.xyz * (1.0 - 
    (tmpvar_58 * _ColorScale0)
  )) * (1.0 - (
    (tmpvar_61 * _ColorScale1)
   * 
    clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0)
  )));
  highp float tmpvar_67;
  tmpvar_67 = clamp ((1.0 - (tmpvar_58 * _ColorScale0)), 0.0, 1.0);
  highp float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (tmpvar_61 * _ColorScale1)), 0.0, 1.0);
  outColor_23.xyz = (((tmpvar_66 + 
    ((tmpvar_44.xyz * tmpvar_58) * _ColorScale0)
  ) + (
    (tmpvar_49.xyz * tmpvar_61)
   * 
    (_ColorScale1 * tmpvar_67)
  )) + ((tmpvar_54.xyz * tmpvar_64) * (_ColorScale2 * tmpvar_68)));
  mediump vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = texMask0_16.xyz;
  tmpvar_1 = tmpvar_69;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "WOUND_SYSTEM" "DEBUG_WOUND_SYSTEM" }
""
}
}
}
 Pass {
  Name "OUTLINE"
  LOD 600
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 103561
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  highp vec4 scrpos_3;
  scrpos_3 = xlv_TEXCOORD0;
  mediump float a_4;
  a_4 = xlv_TEXCOORD0.z;
  if ((a_4 < 0.95)) {
    scrpos_3.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_4 = (a_4 * 17.0);
    highp float tmpvar_5;
    tmpvar_5 = (scrpos_3.y / 4.0);
    highp float tmpvar_6;
    tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
    highp float tmpvar_7;
    if ((tmpvar_5 >= 0.0)) {
      tmpvar_7 = tmpvar_6;
    } else {
      tmpvar_7 = -(tmpvar_6);
    };
    highp float tmpvar_8;
    tmpvar_8 = (scrpos_3.x / 4.0);
    highp float tmpvar_9;
    tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
    highp float tmpvar_10;
    if ((tmpvar_8 >= 0.0)) {
      tmpvar_10 = tmpvar_9;
    } else {
      tmpvar_10 = -(tmpvar_9);
    };
    highp float x_11;
    x_11 = ((a_4 - _DITHERMATRIX[
      int(tmpvar_7)
    ][
      int(tmpvar_10)
    ]) - 0.01);
    if ((x_11 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_2.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  highp vec4 scrpos_3;
  scrpos_3 = xlv_TEXCOORD0;
  mediump float a_4;
  a_4 = xlv_TEXCOORD0.z;
  if ((a_4 < 0.95)) {
    scrpos_3.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_4 = (a_4 * 17.0);
    highp float tmpvar_5;
    tmpvar_5 = (scrpos_3.y / 4.0);
    highp float tmpvar_6;
    tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
    highp float tmpvar_7;
    if ((tmpvar_5 >= 0.0)) {
      tmpvar_7 = tmpvar_6;
    } else {
      tmpvar_7 = -(tmpvar_6);
    };
    highp float tmpvar_8;
    tmpvar_8 = (scrpos_3.x / 4.0);
    highp float tmpvar_9;
    tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
    highp float tmpvar_10;
    if ((tmpvar_8 >= 0.0)) {
      tmpvar_10 = tmpvar_9;
    } else {
      tmpvar_10 = -(tmpvar_9);
    };
    highp float x_11;
    x_11 = ((a_4 - _DITHERMATRIX[
      int(tmpvar_7)
    ][
      int(tmpvar_10)
    ]) - 0.01);
    if ((x_11 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_2.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  highp vec4 scrpos_3;
  scrpos_3 = xlv_TEXCOORD0;
  mediump float a_4;
  a_4 = xlv_TEXCOORD0.z;
  if ((a_4 < 0.95)) {
    scrpos_3.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_4 = (a_4 * 17.0);
    highp float tmpvar_5;
    tmpvar_5 = (scrpos_3.y / 4.0);
    highp float tmpvar_6;
    tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
    highp float tmpvar_7;
    if ((tmpvar_5 >= 0.0)) {
      tmpvar_7 = tmpvar_6;
    } else {
      tmpvar_7 = -(tmpvar_6);
    };
    highp float tmpvar_8;
    tmpvar_8 = (scrpos_3.x / 4.0);
    highp float tmpvar_9;
    tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
    highp float tmpvar_10;
    if ((tmpvar_8 >= 0.0)) {
      tmpvar_10 = tmpvar_9;
    } else {
      tmpvar_10 = -(tmpvar_9);
    };
    highp float x_11;
    x_11 = ((a_4 - _DITHERMATRIX[
      int(tmpvar_7)
    ][
      int(tmpvar_10)
    ]) - 0.01);
    if ((x_11 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_2.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  highp vec4 tmpvar_18;
  tmpvar_18 = (_glesVertex * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = (tmpvar_18.x + (tmpvar_18.z * tmpvar_18.z));
  tmpvar_19.y = ((tmpvar_18.y + (0.5 * tmpvar_18.z)) + ((0.5 * tmpvar_18.x) * tmpvar_18.x));
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = ((tmpvar_19 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = outColor_2;
  };
  outColor_2 = outColor_4;
  highp vec4 scrpos_7;
  scrpos_7 = xlv_TEXCOORD0;
  mediump float a_8;
  a_8 = xlv_TEXCOORD0.z;
  if ((a_8 < 0.95)) {
    scrpos_7.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_8 = (a_8 * 17.0);
    highp float tmpvar_9;
    tmpvar_9 = (scrpos_7.y / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_7.x / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = ((a_8 - _DITHERMATRIX[
      int(tmpvar_11)
    ][
      int(tmpvar_14)
    ]) - 0.01);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_4.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  highp vec4 tmpvar_18;
  tmpvar_18 = (_glesVertex * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = (tmpvar_18.x + (tmpvar_18.z * tmpvar_18.z));
  tmpvar_19.y = ((tmpvar_18.y + (0.5 * tmpvar_18.z)) + ((0.5 * tmpvar_18.x) * tmpvar_18.x));
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = ((tmpvar_19 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = outColor_2;
  };
  outColor_2 = outColor_4;
  highp vec4 scrpos_7;
  scrpos_7 = xlv_TEXCOORD0;
  mediump float a_8;
  a_8 = xlv_TEXCOORD0.z;
  if ((a_8 < 0.95)) {
    scrpos_7.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_8 = (a_8 * 17.0);
    highp float tmpvar_9;
    tmpvar_9 = (scrpos_7.y / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_7.x / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = ((a_8 - _DITHERMATRIX[
      int(tmpvar_11)
    ][
      int(tmpvar_14)
    ]) - 0.01);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_4.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform highp vec4 _OutlineColor;
uniform highp float _Outline;
uniform mediump float _OutlineUseTangent;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesTANGENT;
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_8 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = _glesVertex.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_11));
  tmpvar_7 = tmpvar_10;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_2.xyz;
  tmpvar_12[1] = tmpvar_3.xyz;
  tmpvar_12[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_13;
  if (bool(_OutlineUseTangent)) {
    tmpvar_13 = tmpvar_6.xyz;
  } else {
    tmpvar_13 = tmpvar_5;
  };
  highp mat2 tmpvar_14;
  tmpvar_14[0] = glstate_matrix_projection[0].xy;
  tmpvar_14[1] = glstate_matrix_projection[1].xy;
  tmpvar_7.xy = (tmpvar_10.xy + ((tmpvar_14 * 
    normalize((tmpvar_12 * tmpvar_13))
  .xy) * _Outline));
  tmpvar_8.xyz = _OutlineColor.xyz;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_7.zw;
  tmpvar_9.xyw = o_15.xyw;
  tmpvar_9.z = _DitherAlpha;
  tmpvar_8.w = (_OutlineColor.w * _Opaqueness);
  highp vec4 tmpvar_18;
  tmpvar_18 = (_glesVertex * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = (tmpvar_18.x + (tmpvar_18.z * tmpvar_18.z));
  tmpvar_19.y = ((tmpvar_18.y + (0.5 * tmpvar_18.z)) + ((0.5 * tmpvar_18.x) * tmpvar_18.x));
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = ((tmpvar_19 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec4 outColor_2;
  outColor_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = outColor_2;
  };
  outColor_2 = outColor_4;
  highp vec4 scrpos_7;
  scrpos_7 = xlv_TEXCOORD0;
  mediump float a_8;
  a_8 = xlv_TEXCOORD0.z;
  if ((a_8 < 0.95)) {
    scrpos_7.xy = ((xlv_TEXCOORD0.xy / xlv_TEXCOORD0.w) * _ScreenParams.xy);
    a_8 = (a_8 * 17.0);
    highp float tmpvar_9;
    tmpvar_9 = (scrpos_7.y / 4.0);
    highp float tmpvar_10;
    tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
    highp float tmpvar_11;
    if ((tmpvar_9 >= 0.0)) {
      tmpvar_11 = tmpvar_10;
    } else {
      tmpvar_11 = -(tmpvar_10);
    };
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_7.x / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float x_15;
    x_15 = ((a_8 - _DITHERMATRIX[
      int(tmpvar_11)
    ][
      int(tmpvar_14)
    ]) - 0.01);
    if ((x_15 < 0.0)) {
      discard;
    };
  };
  outColor_2.w = clamp (outColor_4.w, 0.0, 1.0);
  tmpvar_1 = outColor_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 600
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 188075
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_4;
  mediump float outBloomFactor_5;
  outBloomFactor_5 = o_2.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_7;
  tmpvar_7 = (((1.99 * tmpvar_6.x) * _SPNoiseScaler) - 1.0);
  intensity_4 = tmpvar_7;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_4 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_4 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_8;
    tmpvar_8 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_4) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_5 = tmpvar_8;
  } else {
    if ((intensity_4 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_5 = (outBloomFactor_5 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_5;
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_4;
  mediump float outBloomFactor_5;
  outBloomFactor_5 = o_2.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_7;
  tmpvar_7 = (((1.99 * tmpvar_6.x) * _SPNoiseScaler) - 1.0);
  intensity_4 = tmpvar_7;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_4 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_4 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_8;
    tmpvar_8 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_4) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_5 = tmpvar_8;
  } else {
    if ((intensity_4 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_5 = (outBloomFactor_5 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_5;
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_4;
  mediump float outBloomFactor_5;
  outBloomFactor_5 = o_2.w;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_7;
  tmpvar_7 = (((1.99 * tmpvar_6.x) * _SPNoiseScaler) - 1.0);
  intensity_4 = tmpvar_7;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_4 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_4 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_8;
    tmpvar_8 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_4) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_5 = tmpvar_8;
  } else {
    if ((intensity_4 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_5 = (outBloomFactor_5 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_5;
  gl_FragData[0] = o_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "BASE"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Simple" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  GpuProgramID 247844
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp float tmpvar_13;
  tmpvar_13 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + normalize((_WorldSpaceCameraPos - 
      (unity_ObjectToWorld * _glesVertex)
    .xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_13;
  mediump float tmpvar_14;
  if ((d_2 < 0.5)) {
    tmpvar_14 = 0.025;
  } else {
    tmpvar_14 = s_1;
  };
  s_1 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = tmpvar_14;
  tmpvar_15.y = tmpvar_14;
  highp vec4 o_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17.x;
  tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
  o_16.xy = (tmpvar_18 + tmpvar_17.w);
  o_16.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_16.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_15;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = tex_C_Color_4.xyz;
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tex_C_Color_4.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_15;
  tmpvar_15 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + normalize((_WorldSpaceCameraPos - tmpvar_14.xyz))))
  ), 0.0), _Shininess);
  s_1 = tmpvar_15;
  mediump float tmpvar_16;
  if ((d_2 < 0.5)) {
    tmpvar_16 = 0.025;
  } else {
    tmpvar_16 = s_1;
  };
  s_1 = tmpvar_16;
  mediump vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16;
  tmpvar_17.y = tmpvar_16;
  highp vec4 o_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19.x;
  tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
  o_18.xy = (tmpvar_20 + tmpvar_19.w);
  o_18.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_18.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_21;
  highp vec3 lightColor0_22;
  lightColor0_22 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_23;
  lightColor1_23 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_24;
  lightColor2_24 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_25;
  lightColor3_25 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_26;
  lightAttenSq_26 = unity_4LightAtten0;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (lengthSq_29, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_29 = tmpvar_33;
  ndotl_28 = (tmpvar_30 * tmpvar_11.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * tmpvar_11.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * tmpvar_11.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(tmpvar_33)));
  ndotl_28 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (tmpvar_33 * lightAttenSq_26)
  ))));
  col_27 = (lightColor0_22 * tmpvar_35.x);
  col_27 = (col_27 + (lightColor1_23 * tmpvar_35.y));
  col_27 = (col_27 + (lightColor2_24 * tmpvar_35.z));
  col_27 = (col_27 + (lightColor3_25 * tmpvar_35.w));
  tmpvar_21 = col_27;
  tmpvar_6 = tmpvar_21;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_17;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  highp vec4 scrpos_10;
  scrpos_10 = xlv_TEXCOORD6;
  mediump float a_11;
  a_11 = xlv_TEXCOORD6.z;
  if ((a_11 < 0.95)) {
    scrpos_10.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_11 = (a_11 * 17.0);
    highp float tmpvar_12;
    tmpvar_12 = (scrpos_10.y / 4.0);
    highp float tmpvar_13;
    tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
    highp float tmpvar_14;
    if ((tmpvar_12 >= 0.0)) {
      tmpvar_14 = tmpvar_13;
    } else {
      tmpvar_14 = -(tmpvar_13);
    };
    highp float tmpvar_15;
    tmpvar_15 = (scrpos_10.x / 4.0);
    highp float tmpvar_16;
    tmpvar_16 = (fract(abs(tmpvar_15)) * 4.0);
    highp float tmpvar_17;
    if ((tmpvar_15 >= 0.0)) {
      tmpvar_17 = tmpvar_16;
    } else {
      tmpvar_17 = -(tmpvar_16);
    };
    highp float x_18;
    x_18 = ((a_11 - _DITHERMATRIX[
      int(tmpvar_14)
    ][
      int(tmpvar_17)
    ]) - 0.01);
    if ((x_18 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_19;
    scrpos_19 = xlv_TEXCOORD6;
    mediump float a_20;
    a_20 = _ClipAlpha;
    if ((a_20 < 0.99)) {
      scrpos_19.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_20 = (a_20 * 17.0);
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_19.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float tmpvar_24;
      tmpvar_24 = ceil(tmpvar_23);
      highp float tmpvar_25;
      tmpvar_25 = (scrpos_19.y / 4.0);
      highp float tmpvar_26;
      tmpvar_26 = (fract(abs(tmpvar_25)) * 4.0);
      highp float tmpvar_27;
      if ((tmpvar_25 >= 0.0)) {
        tmpvar_27 = tmpvar_26;
      } else {
        tmpvar_27 = -(tmpvar_26);
      };
      mediump float tmpvar_28;
      tmpvar_28 = floor(a_20);
      highp float x_29;
      x_29 = ((tmpvar_28 - (tmpvar_24 * 
        ceil(tmpvar_27)
      )) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((outColor_5.xyz * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 0.0;
  tmpvar_30.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_31;
  tmpvar_31 = mix ((_Color * _EnvColor), tmpvar_30, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_31.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _glesVertex.xyz;
  tmpvar_6 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_7));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_9;
  tmpvar_9[0] = unity_WorldToObject[0].xyz;
  tmpvar_9[1] = unity_WorldToObject[1].xyz;
  tmpvar_9[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(normalize((_glesNormal * tmpvar_9)));
  highp float tmpvar_11;
  tmpvar_11 = ((dot (tmpvar_10, tmpvar_8.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_11;
  mediump vec2 tmpvar_12;
  tmpvar_12.x = d_2;
  tmpvar_12.y = d_2;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - (unity_ObjectToWorld * _glesVertex).xyz));
  highp float tmpvar_14;
  tmpvar_14 = pow (max (dot (tmpvar_10, 
    normalize((tmpvar_8.xyz + tmpvar_13))
  ), 0.0), _Shininess);
  s_1 = tmpvar_14;
  mediump float tmpvar_15;
  if ((d_2 < 0.5)) {
    tmpvar_15 = 0.025;
  } else {
    tmpvar_15 = s_1;
  };
  s_1 = tmpvar_15;
  mediump vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15;
  tmpvar_16.y = tmpvar_15;
  highp vec4 o_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18.x;
  tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
  o_17.xy = (tmpvar_19 + tmpvar_18.w);
  o_17.zw = tmpvar_6.zw;
  tmpvar_5.xyw = o_17.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  gl_Position = tmpvar_6;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_16;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (tex_C_Color_4.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump float s_1;
  mediump float d_2;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_3 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _glesVertex.xyz;
  tmpvar_7 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_8));
  tmpvar_4 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(normalize((_glesNormal * tmpvar_10)));
  highp float tmpvar_12;
  tmpvar_12 = ((dot (tmpvar_11, tmpvar_9.xyz) * 0.4975) + 0.5);
  d_2 = tmpvar_12;
  mediump vec2 tmpvar_13;
  tmpvar_13.x = d_2;
  tmpvar_13.y = d_2;
  highp vec4 tmpvar_14;
  tmpvar_14 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14.xyz));
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_11, 
    normalize((tmpvar_9.xyz + tmpvar_15))
  ), 0.0), _Shininess);
  s_1 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_2 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_1;
  };
  s_1 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_7 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_7.zw;
  tmpvar_5.xyw = o_19.xyw;
  tmpvar_5.z = _DitherAlpha;
  tmpvar_3.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_14.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_14.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_14.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (lengthSq_30, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_30 = tmpvar_34;
  ndotl_29 = (tmpvar_31 * tmpvar_11.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_11.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_11.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(tmpvar_34)));
  ndotl_29 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (tmpvar_34 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_36.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_36.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_36.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_36.w));
  tmpvar_22 = col_28;
  tmpvar_6 = tmpvar_22;
  gl_Position = tmpvar_7;
  xlv_COLOR0 = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_13;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_15;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD11 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  highp vec4 tmpvar_1;
  mediump vec3 specRamp_2;
  mediump vec3 ramp_3;
  mediump vec4 tex_C_Color_4;
  mediump vec4 outColor_5;
  outColor_5.w = 0.0;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_4 = tmpvar_6;
  lowp vec3 tmpvar_7;
  tmpvar_7 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_8.xyz * _SpecMulti) + 1.0);
  specRamp_2 = tmpvar_9;
  outColor_5.xyz = (tex_C_Color_4.xyz + (tex_C_Color_4.xyz * xlv_TEXCOORD11));
  mediump vec3 tmpvar_10;
  mediump float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_11 = (_RGBias + (tmpvar_12 * _RGScale));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_11 * _RGColor).xyz;
  mediump float tmpvar_14;
  tmpvar_14 = clamp (tmpvar_11, 0.0, 1.0);
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (outColor_5.xyz, tmpvar_13, vec3((tmpvar_14 * _RGRatio)));
  tmpvar_10 = tmpvar_15;
  outColor_5.xyz = tmpvar_10;
  highp vec4 scrpos_16;
  scrpos_16 = xlv_TEXCOORD6;
  mediump float a_17;
  a_17 = xlv_TEXCOORD6.z;
  if ((a_17 < 0.95)) {
    scrpos_16.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_17 = (a_17 * 17.0);
    highp float tmpvar_18;
    tmpvar_18 = (scrpos_16.y / 4.0);
    highp float tmpvar_19;
    tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
    highp float tmpvar_20;
    if ((tmpvar_18 >= 0.0)) {
      tmpvar_20 = tmpvar_19;
    } else {
      tmpvar_20 = -(tmpvar_19);
    };
    highp float tmpvar_21;
    tmpvar_21 = (scrpos_16.x / 4.0);
    highp float tmpvar_22;
    tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
    highp float tmpvar_23;
    if ((tmpvar_21 >= 0.0)) {
      tmpvar_23 = tmpvar_22;
    } else {
      tmpvar_23 = -(tmpvar_22);
    };
    highp float x_24;
    x_24 = ((a_17 - _DITHERMATRIX[
      int(tmpvar_20)
    ][
      int(tmpvar_23)
    ]) - 0.01);
    if ((x_24 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_25;
    scrpos_25 = xlv_TEXCOORD6;
    mediump float a_26;
    a_26 = _ClipAlpha;
    if ((a_26 < 0.99)) {
      scrpos_25.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_26 = (a_26 * 17.0);
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_25.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float tmpvar_30;
      tmpvar_30 = ceil(tmpvar_29);
      highp float tmpvar_31;
      tmpvar_31 = (scrpos_25.y / 4.0);
      highp float tmpvar_32;
      tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
      highp float tmpvar_33;
      if ((tmpvar_31 >= 0.0)) {
        tmpvar_33 = tmpvar_32;
      } else {
        tmpvar_33 = -(tmpvar_32);
      };
      mediump float tmpvar_34;
      tmpvar_34 = floor(a_26);
      highp float x_35;
      x_35 = ((tmpvar_34 - (tmpvar_30 * 
        ceil(tmpvar_33)
      )) - 0.01);
      if ((x_35 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.xyz = ((tmpvar_10 * specRamp_2) * (ramp_3 * _LightColor0));
  mediump vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_37;
  tmpvar_37 = mix ((_Color * _EnvColor), tmpvar_36, tex_C_Color_4.wwww);
  outColor_5.xyz = (outColor_5.xyz * tmpvar_37.xyz);
  outColor_5.w = xlv_COLOR0.w;
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  tmpvar_1 = outColor_5;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_16;
  tmpvar_16 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + normalize((_WorldSpaceCameraPos - tmpvar_15.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_16;
  mediump float tmpvar_17;
  if ((d_3 < 0.5)) {
    tmpvar_17 = 0.025;
  } else {
    tmpvar_17 = s_2;
  };
  s_2 = tmpvar_17;
  mediump vec2 tmpvar_18;
  tmpvar_18.x = tmpvar_17;
  tmpvar_18.y = tmpvar_17;
  highp vec4 o_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_21;
  tmpvar_21.x = tmpvar_20.x;
  tmpvar_21.y = (tmpvar_20.y * _ProjectionParams.x);
  o_19.xy = (tmpvar_21 + tmpvar_20.w);
  o_19.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_19.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_22;
  uv_22 = tmpvar_1;
  highp vec4 spuvs_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (_glesVertex * 0.5);
  spuvs_23.xy = ((uv_22 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_25;
  tmpvar_25.x = (tmpvar_24.x + (tmpvar_24.z * tmpvar_24.z));
  tmpvar_25.y = ((tmpvar_24.y + (0.5 * tmpvar_24.z)) + ((0.5 * tmpvar_24.x) * tmpvar_24.x));
  spuvs_23.zw = ((tmpvar_25 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_18;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_23;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + normalize((_WorldSpaceCameraPos - tmpvar_16.xyz))))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_27;
  highp vec3 lightColor0_28;
  lightColor0_28 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_29;
  lightColor1_29 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_30;
  lightColor2_30 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_31;
  lightColor3_31 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_32;
  lightAttenSq_32 = unity_4LightAtten0;
  highp vec3 col_33;
  highp vec4 ndotl_34;
  highp vec4 lengthSq_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_35 = (tmpvar_36 * tmpvar_36);
  lengthSq_35 = (lengthSq_35 + (tmpvar_37 * tmpvar_37));
  lengthSq_35 = (lengthSq_35 + (tmpvar_38 * tmpvar_38));
  highp vec4 tmpvar_39;
  tmpvar_39 = max (lengthSq_35, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_35 = tmpvar_39;
  ndotl_34 = (tmpvar_36 * tmpvar_13.x);
  ndotl_34 = (ndotl_34 + (tmpvar_37 * tmpvar_13.y));
  ndotl_34 = (ndotl_34 + (tmpvar_38 * tmpvar_13.z));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_34 * inversesqrt(tmpvar_39)));
  ndotl_34 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (tmpvar_40 * (1.0/((1.0 + 
    (tmpvar_39 * lightAttenSq_32)
  ))));
  col_33 = (lightColor0_28 * tmpvar_41.x);
  col_33 = (col_33 + (lightColor1_29 * tmpvar_41.y));
  col_33 = (col_33 + (lightColor2_30 * tmpvar_41.z));
  col_33 = (col_33 + (lightColor3_31 * tmpvar_41.w));
  tmpvar_27 = col_33;
  tmpvar_8 = tmpvar_27;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7 = spColor_18;
  highp vec4 scrpos_29;
  scrpos_29 = xlv_TEXCOORD6;
  mediump float a_30;
  a_30 = xlv_TEXCOORD6.z;
  if ((a_30 < 0.95)) {
    scrpos_29.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_30 = (a_30 * 17.0);
    highp float tmpvar_31;
    tmpvar_31 = (scrpos_29.y / 4.0);
    highp float tmpvar_32;
    tmpvar_32 = (fract(abs(tmpvar_31)) * 4.0);
    highp float tmpvar_33;
    if ((tmpvar_31 >= 0.0)) {
      tmpvar_33 = tmpvar_32;
    } else {
      tmpvar_33 = -(tmpvar_32);
    };
    highp float tmpvar_34;
    tmpvar_34 = (scrpos_29.x / 4.0);
    highp float tmpvar_35;
    tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
    highp float tmpvar_36;
    if ((tmpvar_34 >= 0.0)) {
      tmpvar_36 = tmpvar_35;
    } else {
      tmpvar_36 = -(tmpvar_35);
    };
    highp float x_37;
    x_37 = ((a_30 - _DITHERMATRIX[
      int(tmpvar_33)
    ][
      int(tmpvar_36)
    ]) - 0.01);
    if ((x_37 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_38;
    scrpos_38 = xlv_TEXCOORD6;
    mediump float a_39;
    a_39 = _ClipAlpha;
    if ((a_39 < 0.99)) {
      scrpos_38.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_39 = (a_39 * 17.0);
      highp float tmpvar_40;
      tmpvar_40 = (scrpos_38.x / 4.0);
      highp float tmpvar_41;
      tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
      highp float tmpvar_42;
      if ((tmpvar_40 >= 0.0)) {
        tmpvar_42 = tmpvar_41;
      } else {
        tmpvar_42 = -(tmpvar_41);
      };
      highp float tmpvar_43;
      tmpvar_43 = ceil(tmpvar_42);
      highp float tmpvar_44;
      tmpvar_44 = (scrpos_38.y / 4.0);
      highp float tmpvar_45;
      tmpvar_45 = (fract(abs(tmpvar_44)) * 4.0);
      highp float tmpvar_46;
      if ((tmpvar_44 >= 0.0)) {
        tmpvar_46 = tmpvar_45;
      } else {
        tmpvar_46 = -(tmpvar_45);
      };
      mediump float tmpvar_47;
      tmpvar_47 = floor(a_39);
      highp float x_48;
      x_48 = ((tmpvar_47 - (tmpvar_43 * 
        ceil(tmpvar_46)
      )) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((spColor_18.xyz * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_49;
  tmpvar_49.w = 0.0;
  tmpvar_49.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix ((_Color * _EnvColor), tmpvar_49, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_50.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_10;
  tmpvar_10 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  highp float tmpvar_13;
  tmpvar_13 = ((dot (tmpvar_12, tmpvar_10.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_13;
  mediump vec2 tmpvar_14;
  tmpvar_14.x = d_3;
  tmpvar_14.y = d_3;
  highp vec4 tmpvar_15;
  tmpvar_15 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15.xyz));
  highp float tmpvar_17;
  tmpvar_17 = pow (max (dot (tmpvar_12, 
    normalize((tmpvar_10.xyz + tmpvar_16))
  ), 0.0), _Shininess);
  s_2 = tmpvar_17;
  mediump float tmpvar_18;
  if ((d_3 < 0.5)) {
    tmpvar_18 = 0.025;
  } else {
    tmpvar_18 = s_2;
  };
  s_2 = tmpvar_18;
  mediump vec2 tmpvar_19;
  tmpvar_19.x = tmpvar_18;
  tmpvar_19.y = tmpvar_18;
  highp vec4 o_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_8 * 0.5);
  highp vec2 tmpvar_22;
  tmpvar_22.x = tmpvar_21.x;
  tmpvar_22.y = (tmpvar_21.y * _ProjectionParams.x);
  o_20.xy = (tmpvar_22 + tmpvar_21.w);
  o_20.zw = tmpvar_8.zw;
  tmpvar_7.xyw = o_20.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_23;
  uv_23 = tmpvar_1;
  highp vec4 spuvs_24;
  highp vec4 tmpvar_25;
  tmpvar_25 = (_glesVertex * 0.5);
  spuvs_24.xy = ((uv_23 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_26;
  tmpvar_26.x = (tmpvar_25.x + (tmpvar_25.z * tmpvar_25.z));
  tmpvar_26.y = ((tmpvar_25.y + (0.5 * tmpvar_25.z)) + ((0.5 * tmpvar_25.x) * tmpvar_25.x));
  spuvs_24.zw = ((tmpvar_26 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_15.xyz / tmpvar_15.w);
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_14;
  xlv_TEXCOORD2 = tmpvar_19;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD3 = spuvs_24;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_16;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = tex_C_Color_6.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp float _Opaqueness;
uniform mediump vec4 _MainTex_ST;
uniform highp float _Shininess;
uniform highp float _DitherAlpha;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  mediump vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump float s_2;
  mediump float d_3;
  highp vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_4 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = _glesVertex.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_10));
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec4 tmpvar_11;
  tmpvar_11 = normalize(_WorldSpaceLightPos0);
  highp mat3 tmpvar_12;
  tmpvar_12[0] = unity_WorldToObject[0].xyz;
  tmpvar_12[1] = unity_WorldToObject[1].xyz;
  tmpvar_12[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(normalize((_glesNormal * tmpvar_12)));
  highp float tmpvar_14;
  tmpvar_14 = ((dot (tmpvar_13, tmpvar_11.xyz) * 0.4975) + 0.5);
  d_3 = tmpvar_14;
  mediump vec2 tmpvar_15;
  tmpvar_15.x = d_3;
  tmpvar_15.y = d_3;
  highp vec4 tmpvar_16;
  tmpvar_16 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16.xyz));
  highp float tmpvar_18;
  tmpvar_18 = pow (max (dot (tmpvar_13, 
    normalize((tmpvar_11.xyz + tmpvar_17))
  ), 0.0), _Shininess);
  s_2 = tmpvar_18;
  mediump float tmpvar_19;
  if ((d_3 < 0.5)) {
    tmpvar_19 = 0.025;
  } else {
    tmpvar_19 = s_2;
  };
  s_2 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20.x = tmpvar_19;
  tmpvar_20.y = tmpvar_19;
  highp vec4 o_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_9 * 0.5);
  highp vec2 tmpvar_23;
  tmpvar_23.x = tmpvar_22.x;
  tmpvar_23.y = (tmpvar_22.y * _ProjectionParams.x);
  o_21.xy = (tmpvar_23 + tmpvar_22.w);
  o_21.zw = tmpvar_9.zw;
  tmpvar_7.xyw = o_21.xyw;
  tmpvar_7.z = _DitherAlpha;
  tmpvar_4.w = _Opaqueness;
  highp vec2 uv_24;
  uv_24 = tmpvar_1;
  highp vec4 spuvs_25;
  highp vec4 tmpvar_26;
  tmpvar_26 = (_glesVertex * 0.5);
  spuvs_25.xy = ((uv_24 * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_27;
  tmpvar_27.x = (tmpvar_26.x + (tmpvar_26.z * tmpvar_26.z));
  tmpvar_27.y = ((tmpvar_26.y + (0.5 * tmpvar_26.z)) + ((0.5 * tmpvar_26.x) * tmpvar_26.x));
  spuvs_25.zw = ((tmpvar_27 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  tmpvar_6 = (tmpvar_16.xyz / tmpvar_16.w);
  mediump vec3 tmpvar_28;
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 col_34;
  highp vec4 ndotl_35;
  highp vec4 lengthSq_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (unity_4LightPosX0 - tmpvar_16.x);
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosY0 - tmpvar_16.y);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosZ0 - tmpvar_16.z);
  lengthSq_36 = (tmpvar_37 * tmpvar_37);
  lengthSq_36 = (lengthSq_36 + (tmpvar_38 * tmpvar_38));
  lengthSq_36 = (lengthSq_36 + (tmpvar_39 * tmpvar_39));
  highp vec4 tmpvar_40;
  tmpvar_40 = max (lengthSq_36, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_36 = tmpvar_40;
  ndotl_35 = (tmpvar_37 * tmpvar_13.x);
  ndotl_35 = (ndotl_35 + (tmpvar_38 * tmpvar_13.y));
  ndotl_35 = (ndotl_35 + (tmpvar_39 * tmpvar_13.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_35 * inversesqrt(tmpvar_40)));
  ndotl_35 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (tmpvar_40 * lightAttenSq_33)
  ))));
  col_34 = (lightColor0_29 * tmpvar_42.x);
  col_34 = (col_34 + (lightColor1_30 * tmpvar_42.y));
  col_34 = (col_34 + (lightColor2_31 * tmpvar_42.z));
  col_34 = (col_34 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_28 = col_34;
  tmpvar_8 = tmpvar_28;
  gl_Position = tmpvar_9;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_15;
  xlv_TEXCOORD2 = tmpvar_20;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD3 = spuvs_25;
  xlv_TEXCOORD10 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_17;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD11 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp vec4 _Color;
uniform highp vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
uniform sampler2D _SpecRamp;
uniform highp float _SpecMulti;
uniform mediump vec3 _LightColor0;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _ClipAlpha;
uniform highp float _UsingClipAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying highp vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD10;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD11;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  highp vec4 tmpvar_1;
  mediump vec3 V_2;
  mediump vec3 N_3;
  mediump vec3 specRamp_4;
  mediump vec3 ramp_5;
  mediump vec4 tex_C_Color_6;
  mediump vec4 outColor_7;
  outColor_7.w = 0.0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_C_Color_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Ramp, xlv_TEXCOORD1).xyz;
  ramp_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_SpecRamp, xlv_TEXCOORD2);
  highp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_10.xyz * _SpecMulti) + 1.0);
  specRamp_4 = tmpvar_11;
  outColor_7.xyz = (tex_C_Color_6.xyz + (tex_C_Color_6.xyz * xlv_TEXCOORD11));
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD4);
  N_3 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD10));
  V_2 = tmpvar_13;
  mediump vec3 reflection_14;
  mediump vec3 R_15;
  mediump float intensity_16;
  mediump vec4 noiseTex_17;
  mediump vec4 spColor_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SPTex, xlv_TEXCOORD3.xy);
  spColor_18 = tmpvar_19;
  spColor_18.w = (spColor_18.w * _SPOpaqueness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SPNoiseTex, xlv_TEXCOORD3.zw);
  noiseTex_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (((1.99 * tmpvar_20.x) * _SPNoiseScaler) - 1.0);
  intensity_16 = tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 I_23;
  I_23 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_17 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_22 = (I_23 - (2.0 * (
    dot (N_3, I_23)
   * N_3)));
  R_15 = tmpvar_22;
  lowp vec3 tmpvar_24;
  tmpvar_24 = textureCube (_SPCubeMap, R_15).xyz;
  reflection_14 = tmpvar_24;
  highp vec3 tmpvar_25;
  mediump vec3 x_26;
  x_26 = (spColor_18.xyz * _SPOldColor.xyz);
  tmpvar_25 = mix (x_26, ((reflection_14 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_18.xyz = tmpvar_25;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_16 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_16 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_27;
      tmpvar_27 = mix (spColor_18.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_16) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_18.xyz = tmpvar_27;
    };
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = mix (outColor_7, spColor_18, vec4(xlat_mutable_SPIntensity));
  spColor_18 = tmpvar_28;
  outColor_7.w = spColor_18.w;
  mediump vec3 tmpvar_29;
  mediump float tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = pow (clamp ((1.001 - 
    dot (normalize(xlv_TEXCOORD5), normalize(xlv_TEXCOORD4))
  ), 0.001, 1.0), _RGShininess);
  tmpvar_30 = (_RGBias + (tmpvar_31 * _RGScale));
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_30 * _RGColor).xyz;
  mediump float tmpvar_33;
  tmpvar_33 = clamp (tmpvar_30, 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (spColor_18.xyz, tmpvar_32, vec3((tmpvar_33 * _RGRatio)));
  tmpvar_29 = tmpvar_34;
  outColor_7.xyz = tmpvar_29;
  highp vec4 scrpos_35;
  scrpos_35 = xlv_TEXCOORD6;
  mediump float a_36;
  a_36 = xlv_TEXCOORD6.z;
  if ((a_36 < 0.95)) {
    scrpos_35.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
    a_36 = (a_36 * 17.0);
    highp float tmpvar_37;
    tmpvar_37 = (scrpos_35.y / 4.0);
    highp float tmpvar_38;
    tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
    highp float tmpvar_39;
    if ((tmpvar_37 >= 0.0)) {
      tmpvar_39 = tmpvar_38;
    } else {
      tmpvar_39 = -(tmpvar_38);
    };
    highp float tmpvar_40;
    tmpvar_40 = (scrpos_35.x / 4.0);
    highp float tmpvar_41;
    tmpvar_41 = (fract(abs(tmpvar_40)) * 4.0);
    highp float tmpvar_42;
    if ((tmpvar_40 >= 0.0)) {
      tmpvar_42 = tmpvar_41;
    } else {
      tmpvar_42 = -(tmpvar_41);
    };
    highp float x_43;
    x_43 = ((a_36 - _DITHERMATRIX[
      int(tmpvar_39)
    ][
      int(tmpvar_42)
    ]) - 0.01);
    if ((x_43 < 0.0)) {
      discard;
    };
  };
  if (bool(_UsingClipAlpha)) {
    highp vec4 scrpos_44;
    scrpos_44 = xlv_TEXCOORD6;
    mediump float a_45;
    a_45 = _ClipAlpha;
    if ((a_45 < 0.99)) {
      scrpos_44.xy = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) * _ScreenParams.xy);
      a_45 = (a_45 * 17.0);
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_44.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float tmpvar_49;
      tmpvar_49 = ceil(tmpvar_48);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_44.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      mediump float tmpvar_53;
      tmpvar_53 = floor(a_45);
      highp float x_54;
      x_54 = ((tmpvar_53 - (tmpvar_49 * 
        ceil(tmpvar_52)
      )) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_7.xyz = ((tmpvar_29 * specRamp_4) * (ramp_5 * _LightColor0));
  mediump vec4 tmpvar_55;
  tmpvar_55.w = 0.0;
  tmpvar_55.xyz = (_Emission * _EmissionColor.xyz);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix ((_Color * _EnvColor), tmpvar_55, tex_C_Color_6.wwww);
  outColor_7.xyz = (outColor_7.xyz * tmpvar_56.xyz);
  outColor_7.w = xlv_COLOR0.w;
  outColor_7.w = clamp (outColor_7.w, 0.0, 1.0);
  tmpvar_1 = outColor_7;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "VERTEXLIGHT_ON" "SPECIAL_STATE" "RIM_GLOW" "DEBUG_WOUND_SYSTEM" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}